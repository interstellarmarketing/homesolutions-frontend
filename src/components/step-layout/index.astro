---
import Spinner from "@components/spinner/index.astro";
import Rating from "@components/ratings/index.astro";
import { estimateStepsStore } from "@stores/estimateStepsStore";

interface Props {
  stepHeader: string;
  stepNumber: number;
  totalSteps: number;
  hasNextStep?: boolean;
  hasPrevStep?: boolean;
  customButton?: boolean;
  estimateType: string;
  showLoadingOnSubmit?: boolean;
  loadingButtonText?: string;
}

const {
  stepHeader,
  stepNumber,
  totalSteps,
  hasNextStep = false,
  hasPrevStep = false,
  customButton = false,
  estimateType,
  showLoadingOnSubmit = false,
  loadingButtonText = "Processing...",
} = Astro.props;

const progressPercentage = (stepNumber / totalSteps) * 100;

export const getEstimateHeader = (estimateType: string) => {
  switch (estimateType) {
    case "roofing":
      return "Replace Your Roof For No Cost Down*";
    // return "Replace Your Roof<br />For As Low As $97/month";
    case "siding":
      return "Replace Your Siding For No Cost Down*";
    // return "Replace Your Siding<br />For As Low As $97/month";
    case "solar":
      return "<h1 class='text-2xl font-bold'>GO SOLAR FOR NO COST*</h1><h2 class='font-bold'>Take FREE Survey To Qualify</h2>";
    default:
      return "Get Your Free<br />Estimate*";
  }
};

const estimateHeader = getEstimateHeader(estimateType);
---

<div
  class="w-full bg-white rounded-2xl md:shadow-[0px_2px_20px_0px_rgba(0,0,0,0.10)] p-0 md:p-8 mb-16"
>
  <div class="flex flex-col md:items-center gap-8 max-w-xl mx-auto">
    <div class="flex flex-col items-center gap-2">
      <h1
        class="text-center text-[#2d3748] text-xl font-bold leading-7"
        set:html={estimateHeader}
      />
    </div>

    <div class="flex flex-col gap-2 w-full">
      <span class="text-gray-500 text-xs font-medium leading-[18px]">
        Step {stepNumber}
      </span>
      <div class="w-full relative h-1.5">
        <div class="absolute w-full h-full bg-gray-200 rounded-sm"></div>
        <div
          class="absolute h-full bg-[#ffa726] rounded-sm transition-all duration-300"
          style={`width: ${progressPercentage}%`}
        >
        </div>
      </div>
    </div>

    <h2
      class="text-left md:text-center text-[#2d3748] text-lg font-bold leading-normal w-2/3 md:w-full"
    >
      {stepHeader}
    </h2>

    <div class="w-full mb-2 md:mb-12">
      <slot />
    </div>

    {
      !customButton && (
        <div
          class={`w-full grid gap-4 ${hasNextStep && hasPrevStep ? "grid-cols-2" : "grid-cols-1"} max-w-md mx-auto`}
        >
          {hasPrevStep && (
            <button
              id="prevStepButton"
              type="button"
              onclick="window.history.back()"
              class="h-12 px-5 py-3 bg-gray-50 rounded-lg border border-gray-200 flex justify-center items-center gap-2 w-full hover:bg-gray-100 transition-colors"
            >
              <img src="/static/arrow-left.svg" alt="Prev Step" />
              <span class="text-[#2d3748] text-base font-medium leading-normal">
                Prev Step
              </span>
            </button>
          )}

          {hasNextStep && (
            <button
              id="nextStepButton"
              type="submit"
              aria-disabled="true"
              class="h-12 px-5 py-3 bg-[#ffa726] rounded-lg flex justify-center items-center gap-2 w-full text-white aria-disabled:opacity-75 aria-disabled:cursor-not-allowed hover:bg-[#ff9800] transition-colors"
              data-show-loading={showLoadingOnSubmit}
              data-loading-text={loadingButtonText}
              data-estimate-steps-store={JSON.stringify(
                estimateStepsStore.get()
              )}
            >
              <div class="hidden button-spinner">
                <Spinner size="sm" />
              </div>
              <span class="text-base font-medium leading-normal button-text">
                Next Step
              </span>
              <img
                src="/static/arrow-right.svg"
                alt="Next Step"
                class="button-arrow"
              />
            </button>
          )}
        </div>
      )
    }

    {
      customButton && (
        <div class="w-full">
          <slot name="custom-button" />
        </div>
      )
    }
  </div>
  <div class="w-full mt-12 flex justify-center gap-4">
    <Rating src="/static/layout/bbb.svg" alt="BBB" />
    <Rating src="/static/layout/google.svg" alt="Google Rating" />
  </div>
  <div class="text-center text-xs text-gray-500 italic mt-4">
    * Subject to credit approval. Financing terms and conditions apply. Contact
    us for complete details.
  </div>
</div>

<script>
  import { type EstimateStepsState } from "@stores/estimateStepsStore";
  import posthog from "posthog-js";
  import {
    estimateSteps,
    getCurrentStepIndex,
    getTotalSteps,
  } from "src/consts/estimateSteps";

  class StepLayoutWrapper extends HTMLElement {}

  customElements.define("step-layout-wrapper", StepLayoutWrapper);

  class ButtonLoadingHandler {
    private button!: HTMLButtonElement;
    private textSpan!: HTMLSpanElement;
    private arrow!: HTMLImageElement;
    private spinner!: HTMLDivElement;
    private originalText!: string;
    private loadingText!: string;

    initialize(buttonId: string) {
      this.button = document.getElementById(buttonId) as HTMLButtonElement;
      if (!this.button) return;

      this.textSpan = this.button.querySelector(
        ".button-text"
      ) as HTMLSpanElement;
      this.arrow = this.button.querySelector(
        ".button-arrow"
      ) as HTMLImageElement;
      this.spinner = this.button.querySelector(
        ".button-spinner"
      ) as HTMLDivElement;

      this.originalText = this.textSpan.textContent || "Next Step";
      this.loadingText = this.button.dataset.loadingText || "Processing...";

      const form = this.button.closest("form");
      if (!form) return;

      const showLoadingOnSubmit = this.button.dataset.showLoading === "true";

      // Add click handler to the button
      this.button.addEventListener("click", (e: MouseEvent) => {
        if (this.button.getAttribute("aria-disabled") === "true") {
          e.preventDefault();
          this.handleInvalidSubmit(e);
        }
      });

      if (showLoadingOnSubmit) {
        form.addEventListener("submit", this.handleLoadingSubmit.bind(this));
      }
      form.addEventListener(
        "invalid",
        this.handleInvalidSubmit.bind(this),
        true
      );
    }

    private handleInvalidSubmit(e: Event) {
      // Read the message from the data attribute.
      this.estimateStepsStore = JSON.parse(
        this.button.dataset.estimateStepsStore || " {}"
      );

      if (!this.estimateStepsStore) return;

      // estimateStepsStore.subscribe((state) => {
      const { currentStep, estimateType } = this.estimateStepsStore;

      // Only send events when currentStep changes, is not null, and estimateType is available
      if (
        currentStep !== null &&
        currentStep !== this.previousStep &&
        estimateType
      ) {
        this.previousStep = currentStep;

        // Get step information
        const currentStepIndex = getCurrentStepIndex(estimateType, currentStep);
        const totalSteps = getTotalSteps(estimateType) + 1;
        const allStepsString = estimateSteps[estimateType].join(", ");

        const posthogNextStepErrorEvent = {
          estimate_type: estimateType,
          timestamp: new Date().toISOString(),
          step_name: currentStep,
          step_number: currentStepIndex + 1,
          total_step_count: totalSteps,
          all_steps: allStepsString,
        };

        // Send PostHog event
        posthog.capture("form_next_step_error", posthogNextStepErrorEvent);
      }
    }

    private handleLoadingSubmit(e: SubmitEvent) {
      this.setLoadingState(true);

      if (e.defaultPrevented) {
        this.handleInvalidSubmit.bind(this)(e);
      }
    }

    private setLoadingState(isLoading: boolean) {
      if (isLoading) {
        this.textSpan.textContent = this.loadingText;
        this.arrow.classList.add("hidden");
        this.spinner.classList.remove("hidden");
        this.button.setAttribute("aria-disabled", "true");
      } else {
        this.textSpan.textContent = this.originalText;
        this.arrow.classList.remove("hidden");
        this.spinner.classList.add("hidden");
        this.button.setAttribute("aria-disabled", "false");
      }
    }
    private previousStep: string | null = null;
    private estimateStepsStore: EstimateStepsState | null = null;
  }

  // Listen for both DOMContentLoaded (initial page load) and astro:page-load (client-side navigation)
  document.addEventListener("DOMContentLoaded", initButtonHandler);
  document.addEventListener("astro:page-load", initButtonHandler);

  function initButtonHandler() {
    new ButtonLoadingHandler().initialize("nextStepButton");
  }
</script>
