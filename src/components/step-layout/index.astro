---
import Spinner from "@components/spinner/index.astro";
import Rating from "@components/ratings/index.astro";

interface Props {
  stepHeader: string;
  stepNumber: number;
  totalSteps: number;
  hasNextStep?: boolean;
  hasPrevStep?: boolean;
  customButton?: boolean;
  estimateType: string;
  delaySubmit?: boolean;
  showLoadingOnSubmit?: boolean;
  loadingButtonText?: string;
}

const {
  stepHeader,
  stepNumber,
  totalSteps,
  hasNextStep = false,
  hasPrevStep = false,
  customButton = false,
  estimateType,
  delaySubmit = false,
  showLoadingOnSubmit = false,
  loadingButtonText = "Processing...",
} = Astro.props;

const progressPercentage = (stepNumber / totalSteps) * 100;

export const getEstimateHeader = (estimateType: string) => {
  switch (estimateType) {
    case "roofing":
      return "Replace Your Roof<br />For As Low As $97/month";
    default:
      return "Get Your Free<br />Estimate";
  }
};

const estimateHeader = getEstimateHeader(estimateType);
---

<div
  class="w-full bg-white rounded-2xl md:shadow-[0px_2px_20px_0px_rgba(0,0,0,0.10)] p-0 md:p-8 mb-16"
>
  <div class="flex flex-col md:items-center gap-8 max-w-xl mx-auto">
    <div class="flex flex-col items-center gap-2">
      <h1
        class="text-center text-[#2d3748] text-xl font-bold leading-7"
        set:html={estimateHeader}
      />
    </div>

    <div class="flex flex-col gap-2 w-full">
      <span class="text-gray-500 text-xs font-medium leading-[18px]">
        Step {stepNumber}
      </span>
      <div class="w-full relative h-1.5">
        <div class="absolute w-full h-full bg-gray-200 rounded-sm"></div>
        <div
          class="absolute h-full bg-[#ffa726] rounded-sm transition-all duration-300"
          style={`width: ${progressPercentage}%`}
        >
        </div>
      </div>
    </div>

    <h2
      class="text-left md:text-center text-[#2d3748] text-lg font-bold leading-normal w-2/3 md:w-full"
    >
      {stepHeader}
    </h2>

    <div class="w-full mb-2 md:mb-12">
      <slot />
    </div>

    {
      !customButton && (
        <div
          class={`w-full grid gap-4 ${hasNextStep && hasPrevStep ? "grid-cols-2" : "grid-cols-1"} max-w-md mx-auto`}
        >
          {hasPrevStep && (
            <button
              id="prevStepButton"
              type="button"
              onclick="window.history.back()"
              class="h-12 px-5 py-3 bg-gray-50 rounded-lg border border-gray-200 flex justify-center items-center gap-2 w-full hover:bg-gray-100 transition-colors"
            >
              <img src="/static/arrow-left.svg" alt="Prev Step" />
              <span class="text-[#2d3748] text-base font-medium leading-normal">
                Prev Step
              </span>
            </button>
          )}

          {hasNextStep && (
            <button
              id="nextStepButton"
              disabled
              type="submit"
              class="h-12 px-5 py-3 bg-[#ffa726] rounded-lg flex justify-center items-center gap-2 w-full text-white disabled:opacity-75 disabled:cursor-not-allowed hover:bg-[#ff9800] transition-colors"
              data-delay-submit={delaySubmit}
              data-show-loading={showLoadingOnSubmit}
              data-loading-text={loadingButtonText}
            >
              <div class="hidden button-spinner">
                <Spinner size="sm" />
              </div>
              <span class="text-base font-medium leading-normal button-text">
                Next Step
              </span>
              <img
                src="/static/arrow-right.svg"
                alt="Next Step"
                class="button-arrow"
              />
            </button>
          )}
        </div>
      )
    }

    {
      customButton && (
        <div class="w-full">
          <slot name="custom-button" />
        </div>
      )
    }
  </div>
  <div class="w-full mt-12 flex justify-center gap-4">
    <Rating src="/static/layout/bbb.svg" alt="BBB" />
    <Rating src="/static/layout/google.svg" alt="Google Rating" />
  </div>
</div>

<script>
  import { appendQueryParams } from "@utils/queryParams";
  import { navigate } from "astro:transitions/client";

  class ButtonLoadingHandler {
    private button: HTMLButtonElement;
    private textSpan!: HTMLSpanElement;
    private arrow!: HTMLImageElement;
    private spinner!: HTMLDivElement;
    private originalText!: string;
    private loadingText!: string;

    constructor(buttonId: string) {
      this.button = document.getElementById(buttonId) as HTMLButtonElement;
      if (!this.button) return;

      this.textSpan = this.button.querySelector(
        ".button-text"
      ) as HTMLSpanElement;
      this.arrow = this.button.querySelector(
        ".button-arrow"
      ) as HTMLImageElement;
      this.spinner = this.button.querySelector(
        ".button-spinner"
      ) as HTMLDivElement;

      this.originalText = this.textSpan.textContent || "Next Step";
      this.loadingText = this.button.dataset.loadingText || "Processing...";

      this.initialize();
    }

    private initialize() {
      const form = this.button.closest("form");
      if (!form) return;

      const shouldDelay = this.button.dataset.delaySubmit === "true";
      const showLoadingOnSubmit = this.button.dataset.showLoading === "true";

      if (shouldDelay) {
        form.addEventListener("submit", this.handleDelayedSubmit.bind(this));
      } else if (showLoadingOnSubmit) {
        form.addEventListener("submit", this.handleLoadingSubmit.bind(this));
      }
      form.addEventListener(
        "invalid",
        this.handleInvalidSubmit.bind(this),
        true
      ); // Use capture phase to catch all invalid events from form fields
    }

    private handleInvalidSubmit(e: Event) {
      console.log("Invalid form submission:", e);
    }

    private async handleDelayedSubmit(e: SubmitEvent) {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const url = form.action || window.location.href;

      this.setLoadingState(true);

      try {
        // Wait a bit to show the loading state
        await new Promise((resolve) => setTimeout(resolve, 1500));

        // Use fetch to submit the form to support client-side navigation
        const response = await fetch(url, {
          method: "POST",
          body: formData,
          headers: {
            Accept: "text/html,application/xhtml+xml",
          },
        });

        const currentUrl = new URL(window.location.href);
        navigate(
          appendQueryParams(
            response.url,
            new URLSearchParams(currentUrl.search)
          )
        );
      } catch (error) {
        console.error("Form submission error:", error);
        // Fall back to regular form submission if fetch fails
        form.submit();
      }
    }

    private handleLoadingSubmit(e: SubmitEvent) {
      this.setLoadingState(true);

      if (e.defaultPrevented) {
        this.handleInvalidSubmit.bind(this)(e);
      }
    }

    private setLoadingState(isLoading: boolean) {
      if (isLoading) {
        this.textSpan.textContent = this.loadingText;
        this.arrow.classList.add("hidden");
        this.spinner.classList.remove("hidden");
        this.button.disabled = true;
      } else {
        this.textSpan.textContent = this.originalText;
        this.arrow.classList.remove("hidden");
        this.spinner.classList.add("hidden");
        this.button.disabled = false;
      }
    }
  }

  // Listen for both DOMContentLoaded (initial page load) and astro:page-load (client-side navigation)
  document.addEventListener("DOMContentLoaded", initButtonHandler);
  document.addEventListener("astro:page-load", initButtonHandler);

  function initButtonHandler() {
    new ButtonLoadingHandler("nextStepButton");
  }
</script>
