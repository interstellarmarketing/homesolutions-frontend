---
import { estimateStore } from "@stores/estimateProgress";
import { activeEstimateTypeStore } from "@stores/activeEstimateType";
import Layout from "./Layout.astro";
import { z } from "zod";
import { actions } from "astro:actions";
import {
	shortTradeEnum,
	getAllowableValuesForShortTrade,
} from "@assets/info/estimateOptions";
import { shortTradeDiscriminatedUnion } from "@assets/info/estimateOptions";

interface Props {
	title: string;
	estimateType: string;
}

const activeEstimate = estimateStore.get();
const activeEstimateType = activeEstimateTypeStore.get();

//console.log({ activeEstimate });

let { title, estimateType } = Astro.props;

const parseEstimateType = shortTradeEnum.safeParse(estimateType);

if (parseEstimateType.success) {
	estimateType = parseEstimateType.data;
} else {
	return Astro.redirect("/");
}

// INFO: handle switching routes
if (estimateType !== activeEstimate.estimateType) {
	const { estimateAction, ...existingRest } = activeEstimate;
	estimateStore.set({ ...existingRest, estimateType });
}

if (parseEstimateType.data !== activeEstimateType) {
	activeEstimateTypeStore.set(parseEstimateType.data);
	//const testa = getAllowableValuesForShortTrade(parseEstimateType.data);
	//console.log({ testa });
	//const testa = shortTradeDiscriminatedUnion.options[0].shape;
	//const fff = getAllowableValuesForShortTrade(parseEstimateType.data);
	//console.log({ testa });
	//console.log({ fff });
	//const { data: getEstimateType, error } = await Astro.callAction(
	//	actions.estimateOptions.estimateOptionsReformatted,
	//	{ shortTrade: estimateType },
	//);
	//
	//if (error) {
	//	throw new Error("failed to fetch details of estimateType");
	//} else {
	//	activeEstimateTypeStore.set(getEstimateType);
	//}
}
---

<Layout title={title}>
	<slot />
</Layout>
