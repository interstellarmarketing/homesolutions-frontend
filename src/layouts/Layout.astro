---
import Posthog from "@components/anaytics/Posthog.astro";
import Footer from "@components/footer/index.astro";
import NavMain from "@components/nav/NavMain.astro";
import TrustedForm from "@components/TrustedForm.astro";
import { ClientRouter } from "astro:transitions";

/**
 * Props interface for the Layout component
 * @property {string} [title] - Optional page title
 * @property {string} [description] - Optional page description
 */
interface Props {
  title?: string;
  description?: string;
  fbp?: string;
  fbc?: string;
}

/**
 * Default SEO metadata configuration
 */
const DEFAULT_SEO = {
  title: "contracting estimates",
  description: "Get accurate contracting estimates for your project",
  siteName: "Contracting Estimates",
  canonical: Astro.url.href,
};

/**
 * Formats the page title with consistent branding
 * @param {string | undefined} title - The page-specific title
 * @returns {string} The formatted title
 */
const formatTitle = (title?: string): string => {
  return title ? `Estimates - ${title}` : DEFAULT_SEO.title;
};

// Destructure props with default values
const { title, description = DEFAULT_SEO.description } = Astro.props;

let fbp: string | undefined;
let fbc: string | undefined;

try {
  const cfz_facebook_pixel:
    | {
        "BDTt_fb-pixel": { v: string; e: number };
        "BDTt_fb-click": { v: string; e: number };
      }
    | undefined = JSON.parse(
    decodeURIComponent(Astro.cookies.get("cfz_facebook-pixel")?.value || "")
  );
  fbp = cfz_facebook_pixel?.["BDTt_fb-pixel"]?.v;
  fbc = cfz_facebook_pixel?.["BDTt_fb-click"]?.v;
} catch (e) {}

// Environment-based configuration
const isLocal = Astro?.url?.host?.startsWith("localhost");
const formattedTitle = formatTitle(title);
---

<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta property="og:type" content="website" />
    <meta property="og:title" content={formattedTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />

    <Posthog />

    <title>{formattedTitle}</title>
    <ClientRouter />
  </head>
  <body class="min-h-dvh flex flex-col" data-fbp={fbp} data-fbc={fbc}>
    <NavMain />
    <main class="flex flex-col min-h-dvh">
      <div class="flex-1 flex justify-center">
        <div class="w-full max-w-3xl bg-white rounded-2xl mt-8 mx-4">
          <slot />
        </div>
      </div>
      <div class="mt-auto">
        <Footer />
      </div>
    </main>
    <TrustedForm />
  </body>
</html>

<script>
  import { estimateStore } from "@stores/estimateProgress";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import posthog from "posthog-js";

  crossPlatformLoader(() => {
    const posthogPersonId = posthog.get_distinct_id();
    const userAgent = window.navigator.userAgent;
    let fbp: string | undefined;
    let fbc: string | undefined;

    const searchParams = new URLSearchParams(window.location.search);

    const trackingSearchParams = {
      utm_source: searchParams.get("utm_source") || undefined,
      utm_medium: searchParams.get("utm_medium") || undefined,
      utm_campaign: searchParams.get("utm_campaign") || undefined,
      utm_content: searchParams.get("utm_content") || undefined,
      utm_term: searchParams.get("utm_term") || undefined,
      fbclid: searchParams.get("fbclid") || undefined,
      gclid: searchParams.get("gclid") || undefined,
      wbraid: searchParams.get("wbraid") || undefined,
      gbraid: searchParams.get("gbraid") || undefined,
      ssn: searchParams.get("ssn") || undefined,
    };

    try {
      fbp = document.body.getAttribute("data-fbp") || undefined;
      fbc = document.body.getAttribute("data-fbc") || undefined;
    } catch (e) {
      console.error("Error getting facebook cookie", e);
    }

    // Update the store directly
    const existingStore = estimateStore.get();
    const existingTrackingParams = existingStore.trackingParams || {};

    estimateStore.set({
      ...existingStore,
      trackingParams: {
        ...existingTrackingParams,
        ...Object.fromEntries(
          Object.entries({
            ...trackingSearchParams,
            posthogPersonId,
            fbp,
            fbc,
            userAgent,
          }).filter(([_, v]) => v !== undefined)
        ),
      },
    });
    console.log("Tracking params set", existingStore.trackingParams);
  });
</script>
