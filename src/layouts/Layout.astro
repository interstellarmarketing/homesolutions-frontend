---
import Posthog from "@components/anaytics/Posthog.astro";
import PosthogCapture from "@components/anaytics/PosthogCapture.astro";
import Footer from "@components/footer/index.astro";
import NavMain from "@components/nav/NavMain.astro";
import TrustedForm from "@components/TrustedForm.astro";
import { ClientRouter } from "astro:transitions";

/**
 * Props interface for the Layout component
 * @property {string} [title] - Optional page title
 * @property {string} [description] - Optional page description
 */
interface Props {
  title?: string;
  description?: string;
}

/**
 * Default SEO metadata configuration
 */
const DEFAULT_SEO = {
  title: "contracting estimates",
  description: "Get accurate contracting estimates for your project",
  siteName: "Contracting Estimates",
  canonical: Astro.url.href,
};

/**
 * Formats the page title with consistent branding
 * @param {string | undefined} title - The page-specific title
 * @returns {string} The formatted title
 */
const formatTitle = (title?: string): string => {
  return title ? `Estimates - ${title}` : DEFAULT_SEO.title;
};

// Destructure props with default values
const { title, description = DEFAULT_SEO.description } = Astro.props;

// Environment-based configuration
const isLocal = Astro?.url?.host?.startsWith("localhost");
const formattedTitle = formatTitle(title);
---

<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta property="og:type" content="website" />
    <meta property="og:title" content={formattedTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />

    <!-- Meta Pixel Code -->
    <!-- <script>
      !(function (f, b, e, v, n, t, s) {
        if (f.fbq) return;
        n = f.fbq = function () {
          n.callMethod
            ? n.callMethod.apply(n, arguments)
            : n.queue.push(arguments);
        };
        if (!f._fbq) f._fbq = n;
        n.push = n;
        n.loaded = !0;
        n.version = "2.0";
        n.queue = [];
        t = b.createElement(e);
        t.async = !0;
        t.src = v;
        s = b.getElementsByTagName(e)[0];
        s.parentNode.insertBefore(t, s);
      })(
        window,
        document,
        "script",
        "https://connect.facebook.net/en_US/fbevents.js"
      );
      fbq("init", "495778830926164");
      fbq("track", "PageView");
    </script>
    <noscript
      ><img
        height="1"
        width="1"
        style="display:none"
        src="https://www.facebook.com/tr?id=495778830926164&ev=PageView&noscript=1"
      /></noscript
    > -->
    <!-- End Meta Pixel Code -->

    <!-- {!isLocal && <Posthog />}
    {!isLocal && <PosthogCapture />} -->

    <Posthog />
    <PosthogCapture />

    <title>{formattedTitle}</title>
    <ClientRouter />
  </head>
  <body class="min-h-dvh flex flex-col">
    <NavMain />
    <main class="flex flex-col min-h-dvh">
      <div class="flex-1 flex justify-center">
        <div class="w-full max-w-3xl bg-white rounded-2xl mt-8 mx-4">
          <slot />
        </div>
      </div>
      <div class="mt-auto">
        <Footer />
      </div>
    </main>
    <TrustedForm />
  </body>
</html>

<script>
  import { estimateStore } from "@stores/estimateProgress";

  function getCookie(name: string) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts?.pop()?.split(";").shift();
  }
  try {
    const cfz_facebook_pixel:
      | {
          "BDTt_fb-pixel": { v: string; e: number };
          "BDTt_fb-click": { v: string; e: number };
        }
      | undefined = JSON.parse(
      decodeURIComponent(getCookie("cfz_facebook-pixel") || "")
    );

    const fbp = cfz_facebook_pixel?.["BDTt_fb-pixel"]?.v;
    const fbc = cfz_facebook_pixel?.["BDTt_fb-click"]?.v;

    // Update the store directly
    const existingStore = estimateStore.get();
    const existingTrackingParams = existingStore.trackingParams || {};

    estimateStore.set({
      ...existingStore,
      trackingParams: {
        ...existingTrackingParams,
        fbp,
        fbc,
      },
    });
  } catch (e) {}
</script>
