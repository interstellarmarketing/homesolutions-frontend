---
import { z } from "zod";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { estimateParser, estimateStore } from "@stores/estimateProgress";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import {
  estimateStepsStore,
  getNextStep,
  getPreviousStep,
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@stores/estimateStepsStore";
import { appendQueryParams } from "@utils/queryParams";

// Define validation schemas using Zod
const estimateTypeSchema = shortTradeEnum;

const creditScoreOptions = ["Credit score above 640", "Credit score below 640"];

interface PageState {
  estimateType: string;
  currentSelection: boolean | undefined;
}

function initializePage(
  params: Record<string, string | undefined>
): PageState | Response {
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  // Update the estimate steps store with current page
  estimateStepsStore.set({
    currentStep: "credit-score",
    estimateType: parsedEstimateType.data,
  });

  return {
    estimateType: parsedEstimateType.data,
    currentSelection: estimateStore.get().creditScoreAboveOrEqual640,
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const creditScore = formData.get("creditScore");

  // Convert the string value to boolean
  const creditScoreAboveOrEqual640 = creditScore === "Credit score above 640";

  const existingStore = estimateStore.get();
  estimateStore.set({
    ...existingStore,
    creditScoreAboveOrEqual640: !!creditScoreAboveOrEqual640,
  });
  Astro.url.searchParams.append("csh", creditScoreAboveOrEqual640 ? "1" : "0");

  // Get the next step from the store
  const validatedEstimateType = estimateTypeSchema.safeParse(estimateType);
  if (validatedEstimateType.success) {
    const nextStep = getNextStep(validatedEstimateType.data, "credit-score");

    if (nextStep) {
      const redirectUrl = `/estimate/${estimateType}/${nextStep}`;
      return new Response(null, {
        status: 302,
        headers: {
          Location: appendQueryParams(redirectUrl, Astro.url.searchParams),
        },
      });
    }
  }

  // Fallback to original logic
  const redirectUrl = `/estimate/${estimateType}/contact`;
  return Astro.redirect(appendQueryParams(redirectUrl, Astro.url.searchParams));
}

const pageState = initializePage(Astro.params);

if (pageState instanceof Response) {
  return pageState;
}

if (Astro.request.method === "POST") {
  const response = await handleFormSubmission(
    Astro.request,
    pageState.estimateType
  );
  if (response) return response;
}

// Get previous page URL for back button
const validatedEstimateType = estimateTypeSchema.safeParse(
  pageState.estimateType
);
const prevStep = validatedEstimateType.success
  ? getPreviousStep(validatedEstimateType.data, "credit-score")
  : null;
const prevUrl = prevStep
  ? `/estimate/${pageState.estimateType}/${prevStep}`
  : `/estimate/${pageState.estimateType}/home-type`;

// Get step number and total from store
const stepNumber = validatedEstimateType.success
  ? getCurrentStepNumber(validatedEstimateType.data, "credit-score")
  : 1;
const totalSteps = validatedEstimateType.success
  ? getStoreSteps(validatedEstimateType.data)
  : 5;

const stepHeader = "What is your credit score?";

// Transform boolean value to string for the radio component
const currentSelection =
  pageState.currentSelection === undefined
    ? undefined
    : pageState.currentSelection
      ? "Credit score above 640"
      : "Credit score below 640";

const existingStore = estimateStore.get();
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form method="post">
    <input
      type="hidden"
      id="hasInitialSelection"
      value={pageState.currentSelection !== undefined
        ? "Credit score above 640"
        : "Credit score below 640"}
    />

    <StepLayout
      stepHeader={stepHeader}
      hasNextStep
      hasPrevStep={stepNumber > 1}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={creditScoreOptions}
        name="creditScore"
        currentSelection={currentSelection}
        layout="grid2"
      />
    </StepLayout>
  </form>

  <script>
    import { crossPlatformLoader } from "@utils/crossPlatformLoader";

    class FormController {
      private radioButtons: NodeListOf<HTMLInputElement>;
      private submitButton: HTMLButtonElement | null;

      constructor() {
        this.radioButtons = document.querySelectorAll(
          'input[name="creditScore"]'
        );
        this.submitButton = document.getElementById(
          "nextStepButton"
        ) as HTMLButtonElement;
        this.initialize();
      }

      private initialize() {
        if (!this.submitButton || !this.radioButtons.length) return;

        const hasInitialSelection = document.getElementById(
          "hasInitialSelection"
        ) as HTMLInputElement;
        if (hasInitialSelection?.value) {
          this.submitButton.setAttribute("aria-disabled", "false");
        }

        this.radioButtons.forEach((radio) => {
          radio.addEventListener("change", () => this.handleRadioChange());
        });
      }

      private handleRadioChange() {
        if (!this.submitButton) return;

        const isSelected = Array.from(this.radioButtons).some(
          (radio) => radio.checked
        );
        this.submitButton.setAttribute(
          "aria-disabled",
          !isSelected ? "true" : "false"
        );
      }
    }

    crossPlatformLoader(() => new FormController());
  </script>

  <script
    define:vars={{
      existingStore: existingStore,
    }}
  >
    if (existingStore.email) {
      fetch("https://google-advanced-conversions.zsmithbiz1.workers.dev/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          system: {
            timestamp: new Date().toISOString(),
          },
          client: {
            email: existingStore.email,
          },
        }),
      })
        .then((response) => response.text())
        .then((hashedEmail) => {
          const req = {
            event_name: "solar_phone_submit",
            event_id: crypto.randomUUID(),
            event_time: new Date().toISOString(),
            action_source: "website",
            event_source_url: window.location.href,
            user_data: {
              sha256_email_address: hashedEmail,
              fbc: existingStore.trackingParams?.fbc,
              fbp: existingStore.trackingParams?.fbp,
              client_user_agent: window.navigator.userAgent,
              fn: existingStore.firstName,
              ln: existingStore.lastName,
              em: hashedEmail,
              ph: existingStore.phone,
              external_id: existingStore.trackingParams?.posthogPersonId,
            },
          };

          const eventName = `solar_phone_submit`;

          zaraz?.track(eventName, req);

          console.log(`Zaraz event sent (${eventName}):`, req);
        })
        .catch((error) => console.error("Error:", error));
    }
  </script>
</EstimateWrapper>
