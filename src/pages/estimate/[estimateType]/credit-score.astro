---
import { z } from "zod";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { estimateStore } from "@stores/estimateProgress";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";

// Define validation schemas using Zod
const estimateTypeSchema = shortTradeEnum;
const creditScoreSchema = z.string();

const creditScoreOptions = ["Above 640", "Below 640"];

interface PageState {
  estimateType: string;
  currentSelection: boolean | undefined;
}

function initializePage(
  params: Record<string, string | undefined>
): PageState | Response {
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  return {
    estimateType: parsedEstimateType.data,
    currentSelection: estimateStore.get().creditScoreAboveOrEqualTo640,
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const creditScore = formData.get("creditScore");

  // Convert the string value to boolean
  const creditScoreAboveOrEqualTo640 = creditScore === "true";

  const existingStore = estimateStore.get();
  estimateStore.set({
    ...existingStore,
    creditScoreAboveOrEqualTo640,
  });

  return new Response(null, {
    status: 302,
    headers: {
      Location: `/estimate/${estimateType}/contact?csh=${creditScoreAboveOrEqualTo640 ? 1 : 0}`,
    },
  });
}

const pageState = initializePage(Astro.params);

if (pageState instanceof Response) {
  return pageState;
}

if (Astro.request.method === "POST") {
  const response = await handleFormSubmission(
    Astro.request,
    pageState.estimateType
  );
  if (response) return response;
}

const getStepNumber = () => {
  switch (pageState.estimateType) {
    case "roofing":
      return 5;
    default:
      return 2;
  }
};

const stepNumber = getStepNumber();
const totalSteps = getTotalSteps(pageState.estimateType);
const stepHeader = "What is your credit score?";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form method="post">
    <input
      type="hidden"
      id="hasInitialSelection"
      value={pageState.currentSelection ? "true" : "false"}
    />

    <StepLayout
      stepHeader={stepHeader}
      hasNextStep
      hasPrevStep={stepNumber > 1}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      estimateType={pageState.estimateType}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <div class="grid grid-cols-2 gap-4">
          <label class="inline-flex items-center">
            <input
              type="radio"
              name="creditScore"
              checked={pageState.currentSelection === true}
              value="true"
              class="hidden peer"
            />
            <span
              class="w-full h-full px-5 py-2.5 rounded-lg bg-[#F9FAFB] border border-[#E5E7EB] text-[#2D3748] text-sm font-medium leading-[21px] cursor-pointer peer-checked:bg-[#2D3748] peer-checked:text-white peer-checked:border-[#E5E7EB] transition-colors flex justify-center items-center gap-2"
            >
              Credit score above 640
            </span>
          </label>
          <label class="inline-flex items-center">
            <input
              type="radio"
              name="creditScore"
              checked={pageState.currentSelection === false}
              value="false"
              class="hidden peer"
            />
            <span
              class="w-full h-full px-5 py-2.5 rounded-lg bg-[#F9FAFB] border border-[#E5E7EB] text-[#2D3748] text-sm font-medium leading-[21px] cursor-pointer peer-checked:bg-[#2D3748] peer-checked:text-white peer-checked:border-[#E5E7EB] transition-colors flex justify-center items-center gap-2"
            >
              Credit score below 640
            </span>
          </label>
        </div>
      </div>
    </StepLayout>
  </form>

  <script>
    class FormController {
      private radioButtons: NodeListOf<HTMLInputElement>;
      private submitButton: HTMLButtonElement | null;

      constructor() {
        this.radioButtons = document.querySelectorAll(
          'input[name="creditScore"]'
        );
        this.submitButton = document.getElementById(
          "nextStepButton"
        ) as HTMLButtonElement;
        this.initialize();
      }

      private initialize() {
        if (!this.submitButton || !this.radioButtons.length) return;

        const hasInitialSelection = document.getElementById(
          "hasInitialSelection"
        ) as HTMLInputElement;
        if (hasInitialSelection?.value === "true") {
          this.submitButton.disabled = false;
        }

        this.radioButtons.forEach((radio) => {
          radio.addEventListener("change", () => this.handleRadioChange());
        });
      }

      private handleRadioChange() {
        if (!this.submitButton) return;

        const isSelected = Array.from(this.radioButtons).some(
          (radio) => radio.checked
        );
        this.submitButton.disabled = !isSelected;
      }
    }

    new FormController();
  </script>
</EstimateWrapper>
