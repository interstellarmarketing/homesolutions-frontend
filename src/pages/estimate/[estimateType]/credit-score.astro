---
import { shortTradeEnum } from "@assets/info/estimateOptions";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import StepLayout from "@components/step-layout/index.astro";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { appendQueryParams } from "@utils/queryParams";
import { getNextStep } from "src/consts/estimateSteps";

// Define validation schemas using Zod
const estimateTypeSchema = shortTradeEnum;

const creditScoreOptions = ["Credit score above 640", "Credit score below 640"];

interface PageState {
  estimateType: string;
  creditScoreAboveOrEqual640: boolean | undefined;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  return {
    estimateType: parsedEstimateType.data,
    creditScoreAboveOrEqual640: searchParams.get("csh") === "1",
    stepNumber: 1, // Will be updated client-side
    totalSteps: 5, // Will be updated client-side
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const creditScore = formData.get("creditScore");

  // Convert the string value to boolean
  const creditScoreAboveOrEqual640 = creditScore === "Credit score above 640";

  // Pass creditScore data as URL parameter
  const url = new URL(request.url);
  url.searchParams.set("csh", creditScoreAboveOrEqual640 ? "1" : "0");

  // The next step will be determined client-side
  const redirectUrl = `/estimate/${estimateType}/`;
  return new Response(null, {
    status: 302,
    headers: {
      Location: appendQueryParams(redirectUrl, url.searchParams),
    },
  });
}

// Process the page based on the request method
let pageState: PageState | Response;
if (Astro.request.method === "POST") {
  const result = await handleFormSubmission(
    Astro.request,
    Astro.params.estimateType || ""
  );
  if (result) {
    return result;
  }
}

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const stepHeader = "What is your credit score?";

// Transform boolean value to string for the radio component
const currentSelection =
  pageState.creditScoreAboveOrEqual640 === undefined
    ? undefined
    : pageState.creditScoreAboveOrEqual640
      ? "Credit score above 640"
      : "Credit score below 640";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="creditScoreForm"
    data-estimate-type={pageState.estimateType}
  >
    <input
      type="hidden"
      id="hasInitialSelection"
      value={pageState.creditScoreAboveOrEqual640 !== undefined
        ? "true"
        : "false"}
    />

    <StepLayout
      stepHeader={stepHeader}
      hasNextStep
      hasPrevStep={false}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={creditScoreOptions}
        name="creditScore"
        currentSelection={currentSelection}
        layout="grid2"
      />
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { shortTradeEnum } from "@assets/info/estimateOptions";
  import { estimateStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { getNextStep } from "src/consts/estimateSteps";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  // Declare zaraz for TypeScript
  declare const zaraz:
    | {
        track: (eventName: string, data: any) => void;
      }
    | undefined;

  class FormController {
    private radioButtons: NodeListOf<HTMLInputElement>;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private estimateType: string;

    constructor() {
      this.radioButtons = document.querySelectorAll(
        'input[name="creditScore"]'
      );
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById("creditScoreForm") as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private initialize() {
      if (
        !this.submitButton ||
        !this.radioButtons.length ||
        !this.form ||
        !this.estimateType
      )
        return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "credit-score",
        estimateType: validatedEstimateType.data,
      });

      const hasInitialSelection = document.getElementById(
        "hasInitialSelection"
      ) as HTMLInputElement;
      if (hasInitialSelection?.value === "true") {
        this.submitButton.setAttribute("aria-disabled", "false");
      }

      this.radioButtons.forEach((radio) => {
        radio.addEventListener("change", () => this.handleRadioChange());
      });

      this.form.addEventListener("submit", (e) => this.handleSubmit(e));

      // Track event if user has an email in store
      this.trackPhoneSubmitEvent();
    }

    private handleRadioChange() {
      if (!this.submitButton) return;

      const isSelected = Array.from(this.radioButtons).some(
        (radio) => radio.checked
      );
      this.submitButton.setAttribute(
        "aria-disabled",
        !isSelected ? "true" : "false"
      );
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form) return;

      const creditScore = Array.from(this.radioButtons).find(
        (radio) => radio.checked
      )?.value;

      if (!creditScore) return;

      // Convert the string value to boolean
      const creditScoreAboveOrEqual640 =
        creditScore === "Credit score above 640";

      // Update store
      const existingStore = estimateStore.get();
      estimateStore.set({
        ...existingStore,
        creditScoreAboveOrEqual640,
      });

      // Get next step
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(
          validatedEstimateType.data,
          "credit-score"
        );
        if (nextStep) {
          const url = new URL(window.location.href);
          url.pathname = `/estimate/${this.estimateType}/${nextStep}`;
          window.location.href = url.toString();
          return;
        }
      }

      // Fallback to contact
      const url = new URL(window.location.href);
      url.pathname = `/estimate/${this.estimateType}/contact`;
      window.location.href = url.toString();
    }

    private async trackPhoneSubmitEvent() {
      const existingStore = estimateStore.get();
      if (existingStore.email) {
        try {
          const response = await fetch(
            "https://google-advanced-conversions.zsmithbiz1.workers.dev/",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                system: {
                  timestamp: new Date().toISOString(),
                },
                client: {
                  email: existingStore.email,
                },
              }),
            }
          );

          const hashedEmail = await response.text();
          const req = {
            event_name: "solar_phone_submit",
            event_id: crypto.randomUUID(),
            event_time: new Date().toISOString(),
            action_source: "website",
            event_source_url: window.location.href,
            user_data: {
              sha256_email_address: hashedEmail,
              fbc: existingStore.trackingParams?.fbc,
              fbp: existingStore.trackingParams?.fbp,
              client_user_agent: window.navigator.userAgent,
              fn: existingStore.firstName,
              ln: existingStore.lastName,
              em: hashedEmail,
              ph: existingStore.phone,
              external_id: existingStore.trackingParams?.posthogPersonId,
            },
          };

          const eventName = `solar_phone_submit`;
          zaraz?.track(eventName, req);
          console.log(`Zaraz event sent (${eventName}):`, req);
        } catch (error) {
          console.error("Error:", error);
        }
      }
    }
  }

  crossPlatformLoader(() => new FormController());
</script>
