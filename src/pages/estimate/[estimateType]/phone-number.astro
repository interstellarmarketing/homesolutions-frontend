---
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";
import { getNextStep } from "src/consts/estimateSteps";

// Create phone-specific parser
const phoneSchema = z.object({
  phone: z
    .string()
    .regex(/^(\+?1|1)?[-.\s]?\(?[2-9]\d{2}\)?[-.\s]?\d{3}[-.\s]?\d{4}$/),
});

interface PageState {
  estimateType: string;
  phone: string | undefined;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  return {
    estimateType: validatedEstimateType.data,
    phone: searchParams.get("phone") || undefined,
    stepNumber: 1, // Will be updated client-side
    totalSteps: 5, // Will be updated client-side
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const phoneData = {
    phone: formData.get("phoneInput"),
  };

  const phoneParsed = phoneSchema.safeParse(phoneData);
  if (!phoneParsed.success) {
    return null;
  }

  // Pass phone as URL parameter
  const url = new URL(request.url);
  url.searchParams.set("phone", phoneParsed.data.phone);

  // The next step will be determined client-side
  const redirectUrl = `/estimate/${estimateType}/`;
  return new Response(null, {
    status: 302,
    headers: {
      Location: appendQueryParams(redirectUrl, url.searchParams),
    },
  });
}

// Process the page based on the request method
let pageState: PageState | Response;
if (Astro.request.method === "POST") {
  const result = await handleFormSubmission(
    Astro.request,
    Astro.params.estimateType || ""
  );
  if (result) {
    return result;
  }
}

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const stepHeader = "What's the best phone number to reach you?";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="phoneForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      estimateType={pageState.estimateType}
      hasNextStep
      hasPrevStep={false}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <div class="w-full mx-auto flex flex-col gap-2">
          <label
            for="phoneInput"
            class="self-stretch text-[#111928] text-sm font-medium font-['Inter'] leading-[21px] text-left"
          >
            Phone Number
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <img src="/static/phone.svg" alt="phone icon" class="w-4 h-4" />
            </div>
            <input
              type="tel"
              required
              class="w-full bg-gray-50 rounded-lg border border-gray-300 py-3.5 pl-10 pr-4 text-base font-normal font-['Inter'] leading-normal text-gray-500"
              placeholder="Enter phone number"
              id="phoneInput"
              name="phoneInput"
              value={pageState.phone ?? ""}
              inputmode="tel"
              pattern="(\+?1|1)?[-.\s]?\(?[2-9]\d{2}\)?[-.\s]?\d{3}[-.\s]?\d{4}"
              title="Phone number format: (XXX) XXX-XXXX"
              aria-label="Phone number"
              autocomplete="tel"
            />
          </div>
          {
            pageState.estimateType === "solar" ? (
              <p class="text-[8px] text-gray-500">
                By submitting my contact information including my telephone
                number above, I authorize Bright Solar Marketing, and/or its
                affiliates to contact me via telephone calls and/or text
                messages (SMS), using automated dialing technology for
                marketing/advertising purposes. No purchase required. Message
                and data rates may apply.
              </p>
            ) : (
              <p class="text-[8px] text-gray-500">
                By clicking Submit I am providing my{" "}
                <a
                  href="/phone-number/esign"
                  class="text-blue-600 hover:text-blue-800 underline"
                  target="_blank"
                >
                  E-SIGN
                </a>{" "}
                signature and consent for Erie Construction Mid-West, LLC dba
                Erie Home to contact me at the number I entered regarding this
                request and for marketing purposes, including through phone
                calls or text by means of automated technology, SMS/MMS, and
                prerecorded messages. I acknowledge my consent is not required
                for purchase. Message and data rates may apply. I also agree to
                be bound by the Privacy Policy."
              </p>
            )
          }
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { estimateStore, estimateParser } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { getNextStep } from "src/consts/estimateSteps";
  import { shortTradeEnum } from "@assets/info/estimateOptions";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  class PhoneFormController {
    private phoneInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private phoneParser = estimateParser.pick({ phone: true });
    private estimateType: string;

    constructor() {
      this.phoneInput = document.getElementById(
        "phoneInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById("phoneForm") as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private formatPhoneNumber(value: string): string {
      const phoneNumber = value.replace(/\D/g, "");
      const phoneNumberLength = phoneNumber.length;

      if (phoneNumberLength < 4) return phoneNumber;
      if (phoneNumberLength < 7) {
        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
      }
      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(
        3,
        6
      )}-${phoneNumber.slice(6, 10)}`;
    }

    private handlePhoneInput = (e: Event) => {
      const input = e.target as HTMLInputElement;
      const formattedNumber = this.formatPhoneNumber(input.value);
      input.value = formattedNumber;

      const isValid = this.phoneParser.safeParse({
        phone: input.value,
      }).success;

      if (this.submitButton) {
        this.submitButton.setAttribute(
          "aria-disabled",
          !isValid ? "true" : "false"
        );
      }
    };

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form || !this.phoneInput) return;

      const phoneValue = this.phoneInput.value;
      const phoneParsed = this.phoneParser.safeParse({ phone: phoneValue });

      if (phoneParsed.success) {
        // Update store
        const existingStore = estimateStore.get();
        estimateStore.set({
          ...existingStore,
          phone: phoneValue,
        });

        if (this.estimateType === "solar") {
          try {
            const response = await fetch(
              "https://bp-portal.freedomforever.com/open/affiliate/new",
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  token: "xiohQI7fv1KMp4TXXOztptNAbj11FfyKlu7gclQkapjmYvWJ",
                  authorization_token: "JiUIX1ZB1RlJcKRBqGjN",
                  affiliate_id: "Mjc1",
                  campaign_id: "MjM0NA%3D%3D",
                  self_book_campaign_id: "MjQwNQ%3D%3D",
                  first_name: existingStore.firstName || "",
                  last_name: existingStore.lastName || "",
                  email: existingStore.email || "",
                  phone: phoneValue || "",
                  zip_code: existingStore.zipCode || "",
                  Trusted_Form:
                    existingStore.trackingParams?.trustedFormCertUrl || "",
                  hrm_utm_campaign:
                    existingStore.trackingParams?.utm_campaign || "",
                  hrm_campaign:
                    new URLSearchParams(window.location.search).get(
                      "campaign"
                    ) || "",
                  hrm_campaign_id2:
                    new URLSearchParams(window.location.search).get(
                      "campaign_id"
                    ) || "",
                  hrm_adset_id:
                    new URLSearchParams(window.location.search).get("ad_set") ||
                    "",
                  hrm_utm_medium:
                    existingStore.trackingParams?.utm_medium || "",
                  hrm_adset_name:
                    new URLSearchParams(window.location.search).get(
                      "utm_adset"
                    ) || "",
                  hrm_ad_name: existingStore.trackingParams?.utm_content || "",
                  hrm_ad_id:
                    new URLSearchParams(window.location.search).get("ad") || "",
                  unique_id:
                    existingStore.trackingParams?.posthogPersonId || "",
                  hrm_fbc: existingStore.trackingParams?.fbc || "",
                  hrm_fbp: existingStore.trackingParams?.fbp || "",
                  hrm_gclid: existingStore.trackingParams?.gclid || "",
                  hrm_fbclid: existingStore.trackingParams?.fbclid || "",
                  hrm_creative:
                    new URLSearchParams(window.location.search).get(
                      "google_ad_id"
                    ) || "",
                  hrm_placement:
                    new URLSearchParams(window.location.search).get(
                      "placement"
                    ) || "",
                  hrm_utm_source:
                    existingStore.trackingParams?.utm_source || "",
                  "HRM User Agent":
                    existingStore.trackingParams?.userAgent || "",
                }),
              }
            );

            const data = (await response.json()) as { lead_id?: number };
            console.log("Freedom Forever API Response:", data);

            // Store the freedom lead ID
            if (data.lead_id) {
              const updatedStore = estimateStore.get();
              estimateStore.set({
                ...updatedStore,
                freedomLeadId: data.lead_id,
              });
            }
          } catch (error) {
            console.error("Error calling Freedom Forever API:", error);
          }
        }

        // Get next step
        const validatedEstimateType = shortTradeEnum.safeParse(
          this.estimateType
        );
        if (validatedEstimateType.success) {
          const nextStep = getNextStep(
            validatedEstimateType.data,
            "phone-number"
          );
          if (nextStep) {
            const url = new URL(window.location.href);
            url.pathname = `/estimate/${this.estimateType}/${nextStep}`;
            window.location.href = url.toString();
            return;
          }
        }

        // Fallback to address
        const url = new URL(window.location.href);
        url.pathname = `/estimate/${this.estimateType}/address`;
        window.location.href = url.toString();
      }
    }

    private initialize() {
      if (!this.phoneInput || !this.form || !this.estimateType) return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "phone-number",
        estimateType: validatedEstimateType.data,
      });

      // Check initial value
      if (this.phoneInput.value) {
        const isValid = this.phoneParser.safeParse({
          phone: this.phoneInput.value,
        }).success;

        if (this.submitButton && isValid) {
          this.submitButton.setAttribute("aria-disabled", "false");
        }
      }

      // Set up event listeners
      this.phoneInput.addEventListener("input", this.handlePhoneInput);
      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }
  }

  crossPlatformLoader(() => new PhoneFormController());
</script>
