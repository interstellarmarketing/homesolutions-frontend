---
import StepLayout from "@components/step-layout/index.astro";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@models/estimateOptions";
import { z } from "zod";
import { capitalizeFirstLetter } from "@utils/string";

// Create phone-specific parser
const phoneSchema = z.object({
  phone: z
    .string()
    .regex(/^(\+?1|1)?[-.\s]?\(?[2-9]\d{2}\)?[-.\s]?\d{3}[-.\s]?\d{4}$/),
});

interface PageState {
  estimateType: string;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  // Get step information
  const estimateType = validatedEstimateType.data;
  const stepNumber = getCurrentStepNumber(estimateType, "phone-number");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType,
    stepNumber,
    totalSteps,
  };
}

// Process the page based on the request method
let pageState: PageState | Response;

pageState = initializePage(Astro.params);

if (pageState instanceof Response) {
  return pageState;
}

const stepHeader = "What's the best phone number to reach you?";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="phoneForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber <= pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <div class="w-full mx-auto flex flex-col gap-2">
          <label
            for="phoneInput"
            class="self-stretch text-[#111928] text-sm font-medium font-['Inter'] leading-[21px] text-left"
          >
            Phone Number
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <img src="/static/phone.svg" alt="phone icon" class="w-4 h-4" />
            </div>
            <input
              type="tel"
              required
              class="w-full bg-gray-50 rounded-lg border border-gray-300 py-3.5 pl-10 pr-4 text-base font-normal font-['Inter'] leading-normal text-gray-500"
              placeholder="Enter phone number"
              id="phoneInput"
              name="phoneInput"
              inputmode="tel"
              pattern="(\+?1|1)?[-.\s]?\(?[2-9]\d{2}\)?[-.\s]?\d{3}[-.\s]?\d{4}"
              title="Phone number format: (XXX) XXX-XXXX"
              aria-label="Phone number"
              autocomplete="tel"
            />
          </div>
          {
            pageState.estimateType === "solar" ? (
              <p class="text-[8px] text-gray-500">
                By clicking Next Step and submitting my contact information
                including my telephone number above, I authorize Bright Solar
                Marketing, and/or its{" "}
                <a
                  href="/dba"
                  class="text-blue-600 hover:text-blue-800 underline"
                  target="_blank"
                >
                  affiliates
                </a>{" "}
                to contact me via telephone calls and/or text messages (SMS),
                using automated dialing technology for marketing/advertising
                purposes. No purchase required. Message and data rates may
                apply.
              </p>
            ) : (
              <p class="text-[8px] text-gray-500">
                By clicking Next Step I am providing my ESIGN signature and
                consent for Local{" "}
                {capitalizeFirstLetter(pageState.estimateType)}
                Installers and its{" "}
                <a
                  href="/dba"
                  class="text-blue-600 hover:text-blue-800 underline"
                  target="_blank"
                >
                  affiliates
                </a>{" "}
                to contact me at the number I entered regarding this request and
                for marketing purposes, including through phone calls or text by
                means of automated technology, SMS/MMS, and prerecorded
                messages. I acknowledge my consent is not required for purchase.
                Message and data rates may apply. I also agree to be bound by
                the Privacy Policy.
              </p>
            )
          }
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { estimateProgressStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { getNextStep } from "src/consts/estimateSteps";
  import {
    shortTradeEnum,
    type EstimateOptionsSolarSchema,
  } from "@models/estimateOptions";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import { navigate } from "astro:transitions/client";
  import { appendQueryParams } from "@utils/queryParams";
  import { actions } from "astro:actions";
  import { publicLeadsUpdateSchemaSchema } from "@models/supabase/schemas";
  // Declare zaraz for TypeScript
  declare const zaraz:
    | {
        track: (eventName: string, data: any) => void;
      }
    | undefined;

  class PhoneFormController {
    private phoneInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private phoneParser = publicLeadsUpdateSchemaSchema.pick({ phone: true });
    private estimateType: string;

    constructor() {
      this.phoneInput = document.getElementById(
        "phoneInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById("phoneForm") as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private formatPhoneNumber(value: string): string {
      const phoneNumber = value.replace(/\D/g, "");
      const phoneNumberLength = phoneNumber.length;

      if (phoneNumberLength < 4) return phoneNumber;
      if (phoneNumberLength < 7) {
        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
      }
      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(
        3,
        6
      )}-${phoneNumber.slice(6, 10)}`;
    }

    private validatePhoneNumber(input: HTMLInputElement) {
      const formattedNumber = this.formatPhoneNumber(input.value);
      input.value = formattedNumber;

      const isValid =
        this.phoneParser.safeParse({
          phone: input.value,
        }).success &&
        !input.value.replace(/\D/g, "").startsWith("1") &&
        input.value.replace(/\D/g, "").length === 10;

      if (this.submitButton) {
        this.submitButton.setAttribute(
          "aria-disabled",
          !isValid ? "true" : "false"
        );
      }
    }

    private handlePhoneInput = (e: Event) => {
      const input = e.target as HTMLInputElement;
      this.validatePhoneNumber(input);
    };

    private async trackSolarPhoneSubmitEvent() {
      const existingStore = estimateProgressStore.get();
      const estimateOptions = existingStore.estimate_options as
        | EstimateOptionsSolarSchema
        | undefined;
      if (existingStore.email && !estimateOptions?.solar_phone_submitted_at) {
        try {
          const response = await fetch(
            "https://google-advanced-conversions.zsmithbiz1.workers.dev/",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                system: {
                  timestamp: new Date().toISOString(),
                },
                client: {
                  email: existingStore.email,
                },
              }),
            }
          );

          const hashedEmail = await response.text();
          const req = {
            event_name: "solar_phone_submit",
            event_id: crypto.randomUUID(),
            event_time: new Date().toISOString(),
            action_source: "website",
            event_source_url: window.location.href,
            user_data: {
              sha256_email_address: hashedEmail,
              fbc: existingStore.fbc,
              fbp: existingStore.fbp,
              client_user_agent: window.navigator.userAgent,
              fn: existingStore.first_name,
              ln: existingStore.last_name,
              em: hashedEmail,
              ph: existingStore.phone,
              external_id: existingStore.posthog_person_id,
            },
          };

          const eventName = `solar_phone_submit`;
          zaraz?.track(eventName, req);
          console.log(`Zaraz event sent (${eventName}):`, req);
          estimateProgressStore.set({
            ...existingStore,
            estimate_options: {
              ...estimateOptions,
              solar_phone_submitted_at: new Date().toISOString(),
            },
          });
        } catch (error) {
          console.error("Error:", error);
        }
      }
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form || !this.phoneInput) return;

      const phoneValue = this.phoneInput.value;
      const phoneParsed = this.phoneParser.safeParse({ phone: phoneValue });

      if (phoneParsed.success) {
        // Update store
        const existingStore = estimateProgressStore.get();
        estimateProgressStore.set({
          ...existingStore,
          phone: phoneValue,
        });

        if (this.estimateType === "solar") {
          try {
            const response = await actions.submitFreedomForever({
              token: "xiohQI7fv1KMp4TXXOztptNAbj11FfyKlu7gclQkapjmYvWJ",
              authorization_token: "JiUIX1ZB1RlJcKRBqGjN",
              affiliate_id: "Mjc1",
              campaign_id: "MjM0NA%3D%3D",
              self_book_campaign_id: "MjQwNQ%3D%3D",
              first_name: existingStore.first_name || "",
              last_name: existingStore.last_name || "",
              email: existingStore.email || "",
              phone: phoneValue || "",
              zip_code: existingStore.zip_code || "",
              Trusted_Form: existingStore.trusted_form_cert_url || "",
              hrm_utm_campaign: existingStore.utm_campaign || "",
              hrm_campaign:
                new URLSearchParams(window.location.search).get("campaign") ||
                "",
              hrm_campaign_id2:
                new URLSearchParams(window.location.search).get(
                  "campaign_id"
                ) || "",
              hrm_adset_id:
                new URLSearchParams(window.location.search).get("ad_set") || "",
              hrm_utm_medium: existingStore.utm_medium || "",
              hrm_adset_name:
                new URLSearchParams(window.location.search).get("utm_adset") ||
                "",
              hrm_ad_name: existingStore.utm_content || "",
              hrm_ad_id:
                new URLSearchParams(window.location.search).get("ad") || "",
              unique_id: existingStore.posthog_person_id || "",
              hrm_fbc: existingStore.fbc || "",
              hrm_fbp: existingStore.fbp || "",
              hrm_gclid: existingStore.gclid || "",
              hrm_fbclid: existingStore.fbclid || "",
              hrm_creative:
                new URLSearchParams(window.location.search).get(
                  "google_ad_id"
                ) || "",
              hrm_placement:
                new URLSearchParams(window.location.search).get("placement") ||
                "",
              hrm_utm_source: existingStore.utm_source || "",
              "HRM User Agent": existingStore.user_agent || "",
            });
            console.log("Freedom Forever API Response:", response);

            const lead_id = response.data;
            if (lead_id) {
              const updatedStore = estimateProgressStore.get();
              const estimateOptions = updatedStore.estimate_options as
                | EstimateOptionsSolarSchema
                | undefined;
              estimateProgressStore.set({
                ...updatedStore,
                estimate_options: {
                  ...estimateOptions,
                  freedom_lead_id: lead_id,
                },
              });
            }
          } catch (error) {
            console.error("Error calling Freedom Forever API:", error);
          }
          await this.trackSolarPhoneSubmitEvent();
        }

        // Get next step
        const validatedEstimateType = shortTradeEnum.safeParse(
          this.estimateType
        );
        if (validatedEstimateType.success) {
          const nextStep = getNextStep(
            validatedEstimateType.data,
            "phone-number"
          );
          if (nextStep) {
            const currentUrl = new URL(window.location.href);
            navigate(
              appendQueryParams(
                `/estimate/${this.estimateType}/${nextStep}`,
                new URLSearchParams(currentUrl.search)
              )
            );
            return;
          }
        }
      }
    }

    private initialize() {
      if (!this.phoneInput || !this.form || !this.estimateType) return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "phone-number",
        estimateType: validatedEstimateType.data,
      });

      // Set phone value from store data if available
      const storeData = estimateProgressStore.get();
      if (storeData.phone) {
        this.phoneInput.value = storeData.phone;
      }

      if (this.phoneInput) {
        this.validatePhoneNumber(this.phoneInput);
      }

      // Set up event listeners
      this.phoneInput.addEventListener("input", this.handlePhoneInput);
      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }
  }

  crossPlatformLoader(() => new PhoneFormController());
</script>
