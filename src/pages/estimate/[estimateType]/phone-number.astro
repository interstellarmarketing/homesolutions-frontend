---
import { estimateStore, estimateParser } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import {
  estimateStepsStore,
  getNextStep,
  getPreviousStep,
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@stores/estimateStepsStore";
import { appendQueryParams } from "@utils/queryParams";
/**
 * Extract and validate estimate type from URL parameters
 * Redirect to home if estimate type is missing
 */
const { estimateType } = Astro.params;
if (!estimateType) {
  return Astro.redirect("/");
}

const validatedEstimateType = shortTradeEnum.safeParse(estimateType);
if (validatedEstimateType.success) {
  // Update the estimate steps store with current page
  estimateStepsStore.set({
    currentStep: "phone-number",
    estimateType: validatedEstimateType.data,
  });
}

/**
 * Retrieve existing data from the estimate store
 * Extract phone number for validation
 */
let existingStore = estimateStore.get();
const { phone } = existingStore;

/**
 * Create a phone-specific parser from the main estimate parser
 * This ensures we only validate the phone field
 */
const phoneParser = estimateParser.pick({
  phone: true,
});

/**
 * Validate existing phone data
 * Used to determine initial button state
 */
const existingPhoneParsed = phoneParser.safeParse({ phone });

/**
 * Handle form submission
 * Validates phone number and updates store if valid
 * Redirects to the next page on success using the store
 */
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const phone = formData.get("phoneInput");

  const phoneParsed = phoneParser.safeParse({ phone });

  if (phoneParsed.success) {
    // Update store with new phone data while preserving existing data
    estimateStore.set({
      ...existingStore,
      ...phoneParsed.data,
    });

    console.log("estimateType", estimateType);

    if (estimateType === "solar") {
      try {
        const existingParams = new URLSearchParams(Astro.url.search);
        const response = await fetch(
          "https://bp-portal.freedomforever.com/open/affiliate/new",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              token: "xiohQI7fv1KMp4TXXOztptNAbj11FfyKlu7gclQkapjmYvWJ",
              authorization_token: "JiUIX1ZB1RlJcKRBqGjN",
              affiliate_id: "Mjc1",
              campaign_id: "MjM0NA%3D%3D",
              self_book_campaign_id: "MjQwNQ%3D%3D",
              first_name: existingStore.firstName || "",
              last_name: existingStore.lastName || "",
              email: existingStore.email || "",
              phone: phone || "",
              zip_code: existingStore.zipCode || "",
              Trusted_Form:
                existingStore.trackingParams?.trustedFormCertUrl || "",
              hrm_utm_campaign:
                existingStore.trackingParams?.utm_campaign || "",
              hrm_campaign: existingParams.get("campaign") || "",
              hrm_campaign_id2: existingParams.get("campaign_id") || "",
              hrm_adset_id: existingParams.get("ad_set") || "",
              hrm_utm_medium: existingStore.trackingParams?.utm_medium || "",
              hrm_adset_name: existingParams.get("utm_adset") || "",
              hrm_ad_name: existingStore.trackingParams?.utm_content || "",
              hrm_ad_id: existingParams.get("ad") || "",
              unique_id: existingStore.trackingParams?.posthogPersonId || "",
              hrm_fbc: existingStore.trackingParams?.fbc || "",
              hrm_fbp: existingStore.trackingParams?.fbp || "",
              hrm_gclid: existingStore.trackingParams?.gclid || "",
              hrm_fbclid: existingStore.trackingParams?.fbclid || "",
              hrm_creative: existingParams.get("google_ad_id") || "",
              hrm_placement: existingParams.get("placement") || "",
              hrm_utm_source: existingStore.trackingParams?.utm_source || "",
              "HRM User Agent": existingStore.trackingParams?.userAgent || "",
            }),
          }
        );

        const data = (await response.json()) as { lead_id?: number };
        console.log("Freedom Forever API Response:", data);

        // Store the freedom lead ID
        existingStore = estimateStore.get();

        estimateStore.set({
          ...existingStore,
          freedomLeadId: data.lead_id,
        });
      } catch (error) {
        console.error("Error calling Freedom Forever API:", error);
      }
    }

    // Get the next step from the store
    if (validatedEstimateType.success) {
      const nextStep = getNextStep(validatedEstimateType.data, "phone-number");

      if (nextStep) {
        const redirectUrl = `/estimate/${estimateType}/${nextStep}`;
        return new Response(null, {
          status: 302,
          headers: {
            Location: appendQueryParams(redirectUrl, Astro.url.searchParams),
          },
        });
      }
    }

    // Fallback to original logic
    const redirectUrl = `/estimate/${estimateType}/address`;
    return Astro.redirect(
      appendQueryParams(redirectUrl, Astro.url.searchParams)
    );
  }
}

// Get previous page URL for back button
const prevStep = validatedEstimateType.success
  ? getPreviousStep(validatedEstimateType.data, "phone-number")
  : null;
const prevUrl = prevStep
  ? `/estimate/${estimateType}/${prevStep}`
  : `/estimate/${estimateType}/email`;

// Get step number and total from store
const stepNumber = validatedEstimateType.success
  ? getCurrentStepNumber(validatedEstimateType.data, "phone-number")
  : 1;
const totalSteps = validatedEstimateType.success
  ? getStoreSteps(validatedEstimateType.data)
  : 5;

const getStepHeader = () => {
  switch (estimateType) {
    default:
      return "What's the best phone number to reach you?";
  }
};
const stepHeader = getStepHeader();
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
  <form method="post">
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      estimateType={estimateType}
      hasNextStep
      hasPrevStep={stepNumber > 1}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <div class="w-full mx-auto flex flex-col gap-2">
          <label
            for="phoneInput"
            class="self-stretch text-[#111928] text-sm font-medium font-['Inter'] leading-[21px] text-left"
          >
            Phone Number
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <img src="/static/phone.svg" alt="phone icon" class="w-4 h-4" />
            </div>
            <input
              type="tel"
              required
              class="w-full bg-gray-50 rounded-lg border border-gray-300 py-3.5 pl-10 pr-4 text-base font-normal font-['Inter'] leading-normal text-gray-500"
              placeholder="Enter phone number"
              id="phoneInput"
              name="phoneInput"
              value={phone ?? ""}
              inputmode="tel"
              pattern="(\+?1|1)?[-.\s]?\(?[2-9]\d{2}\)?[-.\s]?\d{3}[-.\s]?\d{4}"
              title="Phone number format: (XXX) XXX-XXXX"
              aria-label="Phone number"
              autocomplete="tel"
            />
          </div>
          <p class="text-[8px] text-gray-500">
            By clicking Submit I am providing my <a
              href="/phone-number/esign"
              class="text-blue-600 hover:text-blue-800 underline"
              target="_blank">E-SIGN</a
            > signature and consent for Erie Construction Mid-West, LLC dba Erie
            Home to contact me at the number I entered regarding this request and
            for marketing purposes, including through phone calls or text by means
            of automated technology, SMS/MMS, and prerecorded messages. I acknowledge
            my consent is not required for purchase. Message and data rates may apply.
            I also agree to be bound by the Privacy Policy."
          </p>
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { estimateParser } from "@stores/estimateProgress";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  /**
   * Controller class for phone form functionality
   * Handles input formatting, validation, and button state
   */
  class PhoneFormController {
    private phoneInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private phoneParser = estimateParser.pick({ phone: true });

    constructor() {
      // Initialize DOM elements
      this.phoneInput = document.getElementById(
        "phoneInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.initialize();
    }

    /**
     * Formats a phone number string to (XXX) XXX-XXXX format
     * @param value - Raw phone number input
     * @returns Formatted phone number string
     */
    private formatPhoneNumber(value: string): string {
      // Remove non-digit characters
      const phoneNumber = value.replace(/\D/g, "");
      const phoneNumberLength = phoneNumber.length;

      // Format based on length
      if (phoneNumberLength < 4) return phoneNumber;
      if (phoneNumberLength < 7) {
        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
      }
      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(
        3,
        6
      )}-${phoneNumber.slice(6, 10)}`;
    }

    /**
     * Handles phone input events
     * Formats input value and updates button state
     */
    private handlePhoneInput = (e: Event) => {
      const input = e.target as HTMLInputElement;
      const formattedNumber = this.formatPhoneNumber(input.value);
      input.value = formattedNumber;

      // Validate phone number and update button state
      const isValid = this.phoneParser.safeParse({
        phone: input.value,
      }).success;

      if (this.submitButton) {
        this.submitButton.setAttribute(
          "aria-disabled",
          !isValid ? "true" : "false"
        );
      }
    };

    /**
     * Initializes event listeners
     * Sets up phone input handling and checks initial state
     */
    private initialize() {
      if (this.phoneInput) {
        // Check initial value
        if (this.phoneInput.value) {
          const isValid = this.phoneParser.safeParse({
            phone: this.phoneInput.value,
          }).success;

          if (this.submitButton && isValid) {
            this.submitButton.setAttribute("aria-disabled", "false");
          }
        }

        this.phoneInput.addEventListener("input", this.handlePhoneInput);
      }
    }
  }

  crossPlatformLoader(() => new PhoneFormController());
</script>
