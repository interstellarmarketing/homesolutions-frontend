---
import { estimateStore, estimateParser } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { estimateStepsStore } from "@stores/estimateStepsStore";
import { appendQueryParams } from "@utils/queryParams";
/**
 * Formats store data to match the backend submission schema
 */
async function formatStoreForSubmission(
  store: ReturnType<typeof estimateParser.parse>
) {
  const submission: any = {
    // Required contact information
    streetAddress: store.streetAddress,
    creditScore: store.creditScoreAboveOrEqual640,
    city: store.city,
    state: store.state,
    zipCode: store.zipCode,
    firstName: store.firstName,
    lastName: store.lastName,
    email: store.email,
    phone: store.phone,
    ipAddress:
      Astro?.request?.headers?.get("cf-connecting-ip") ||
      Astro?.request?.headers?.get("x-real-ip") ||
      Astro?.request?.headers?.get("x-forwarded-for")?.split(",")[0] ||
      null,

    // Required qualification fields
    isHomeowner: store.isHomeowner,
    shortTrade: store.estimateShortTrade,
    action: store.estimateAction || "unknown",

    // Optional property information
    homeType: store.homeType || null,

    // PostHog person ID
    posthogPersonId: store.trackingParams?.posthogPersonId || null,

    // Marketing attribution from trackingParams
    utmSource: store.trackingParams?.utm_source || null,
    utmMedium: store.trackingParams?.utm_medium || null,
    utmCampaign: store.trackingParams?.utm_campaign || null,
    utmTerm: store.trackingParams?.utm_term || null,
    utmContent: store.trackingParams?.utm_content || null,
    utmId: null, // Add if you have this in your store
    fbclid: store.trackingParams?.fbclid || null,
    fbc: store.trackingParams?.fbc || null,
    fbp: store.trackingParams?.fbp || null,
    userAgent: store.trackingParams?.userAgent || null,
    gclid: store.trackingParams?.gclid || null,
    wbraid: store.trackingParams?.wbraid || null,
    gbraid: store.trackingParams?.gbraid || null,
    ssn: store.trackingParams?.ssn || null,
    trustedFormCertUrl: store.trackingParams?.trustedFormCertUrl || null,
    trustedFormPingUrl: store.trackingParams?.trustedFormPingUrl || null,
  };

  if (store.estimateShortTrade === "roofing") {
    submission.roofType = store.projectDetails;
  }

  switch (store.estimateType) {
    case "solar":
      submission.solarType = store.projectDetails;
      break;
  }

  return submission;
}

/**
 * Processes the final submission and resets the store
 */
async function processFinalSubmission(
  existingStore: ReturnType<typeof estimateParser.parse>
) {
  try {
    const formattedSubmission = await formatStoreForSubmission(existingStore);
    const zDb = Astro.locals.runtime.env.DB;
    const db = await zDb.D1Methods();
    await db.insertSubmission(formattedSubmission as any);
  } catch (error) {
    console.error("Error processing submission:", error);
  }
}

// Validate route parameters
const { estimateType } = Astro.params;
if (!estimateType) {
  return Astro.redirect(appendQueryParams("/", Astro.url.searchParams));
}

const validatedEstimateType = shortTradeEnum.safeParse(estimateType);
if (validatedEstimateType.success) {
  // Update the estimate steps store with current page
  estimateStepsStore.set({
    currentStep: "thank-you",
    estimateType: validatedEstimateType.data,
  });
}

// Get and validate store data
const existingStore = estimateParser.parse(estimateStore.get());
await processFinalSubmission(existingStore);
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
  <div
    class="w-full bg-white rounded-2xl md:shadow-[0px_2px_20px_0px_rgba(0,0,0,0.10)] md:p-8 mt-12"
  >
    <div class="flex flex-col items-center gap-8 max-w-2xl mx-auto">
      <div class="] flex-col justify-start items-center gap-8 inline-flex">
        <div
          class="w-24 h-24 md:w-28 md:h-28 flex items-center justify-center bg-[#d0fadf] rounded-full border-[12px] md:border-[16px] border-[#ebfdf2]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            class="h-10 w-10 text-green-700 md:w-12 md:h-12 md:stroke-[2]"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M4.5 12.75l6 6 9-13.5"></path>
          </svg>
        </div>
        <div
          class="self-stretch flex-col justify-start items-center gap-6 flex"
        >
          <div
            class="self-stretch text-center text-[#1d3557] text-3xl font-bold font-['Inter'] leading-9 max-w-lg"
          >
            Thank you for your submission!
          </div>
          <div
            class="w-full text-center text-[#2d3748] text-sm font-medium font-['Inter'] leading-[21px] max-w-md"
          >
            {
              estimateType === "roofing" ? (
                <div class="mb-8">
                  <p class="mb-4">
                    Please be on the lookout for a phone call and text message
                    in the next few minutes. Our roof repair and installation
                    team will be calling you to:
                  </p>
                  <ul class="text-left list-disc pl-6 space-y-2 my-4">
                    <li>Qualify your home</li>
                    <li>Get more background on your desired roofing project</li>
                    <li>
                      Schedule you for a free in-home consultation with one of
                      our experts
                    </li>
                  </ul>
                </div>
              ) : (
                <p class="mb-4">
                  We'll be in touch with matching pros in {existingStore.city},{" "}
                  {existingStore.state} shortly.
                </p>
              )
            }
            <div class="w-full">
              <a
                href={`/estimate/${estimateType}`}
                class="h-12 px-5 py-3 bg-[#ffa726] w-full rounded-lg justify-center items-center gap-2 inline-flex hover:bg-[#ff9800] transition-colors"
              >
                <span
                  class="text-white text-base font-medium font-['Inter'] leading-normal"
                >
                  Return Home
                </span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script
      define:vars={{
        existingStore: existingStore,
      }}
    >
      if (existingStore.creditScoreAboveOrEqual640) {
        const req = {
          event_name: "Lead",
          event_id: crypto.randomUUID(),
          event_time: new Date().toISOString(),
          action_source: "website",
          event_source_url: window.location.href,
          user_data: {
            fbc: existingStore.trackingParams?.fbc,
            fbp: existingStore.trackingParams?.fbp,
            client_user_agent: window.navigator.userAgent,
            fn: existingStore.firstName,
            ln: existingStore.lastName,
            em: existingStore.email,
            ph: existingStore.phone,
            external_id: existingStore.trackingParams?.posthogPersonId,
          },
        };

        zaraz?.track(
          `completed_${existingStore.estimateShortTrade}_estimate`,
          req
        );
      }

      if (existingStore.email) {
        fetch("https://google-advanced-conversions.zsmithbiz1.workers.dev/", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            system: {
              timestamp: new Date().toISOString(),
            },
            client: {
              email: existingStore.email,
            },
          }),
        })
          .then((response) => response.text())
          .then((hashedEmail) => {
            console.log("Hashed email for Google:", hashedEmail);
            // Send to Google here
          })
          .catch((error) => console.error("Error:", error));
      }
    </script>
  </div>
</EstimateWrapper>
