---
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";

// Create page-specific parser
const pageSchema = z.object({
  estimateType: shortTradeEnum,
  city: z.string().optional(),
  state: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  creditScoreAboveOrEqual640: z.boolean().optional(),
});

interface PageState {
  estimateType: string;
  city: string;
  state: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  creditScoreAboveOrEqual640: boolean;
  ipAddress: string | null;
  trackingParams: {
    fbc: string;
    fbp: string;
    posthogPersonId: string;
  };
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams,
  request: Request
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, {
      status: 302,
      headers: { Location: appendQueryParams("/", searchParams) },
    });
  }

  return {
    estimateType: validatedEstimateType.data,
    city: searchParams.get("city") || "",
    state: searchParams.get("state") || "",
    firstName: searchParams.get("firstName") || "",
    lastName: searchParams.get("lastName") || "",
    email: searchParams.get("email") || "",
    phone: searchParams.get("phone") || "",
    creditScoreAboveOrEqual640:
      searchParams.get("creditScoreAboveOrEqual640") === "true",
    ipAddress:
      request.headers.get("cf-connecting-ip") ||
      request.headers.get("x-real-ip") ||
      request.headers.get("x-forwarded-for")?.split(",")[0] ||
      null,
    trackingParams: {
      fbc: searchParams.get("fbc") || "",
      fbp: searchParams.get("fbp") || "",
      posthogPersonId: searchParams.get("posthogPersonId") || "",
    },
  };
}

const pageState = initializePage(
  Astro.params,
  Astro.url.searchParams,
  Astro.request
);

if (pageState instanceof Response) {
  return pageState;
}
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
  data-ip-address={pageState.ipAddress}
>
  <div
    class="w-full bg-white rounded-2xl md:shadow-[0px_2px_20px_0px_rgba(0,0,0,0.10)] md:p-8 mt-12"
    data-estimate-type={pageState.estimateType}
  >
    <div class="flex flex-col items-center gap-8 max-w-2xl mx-auto">
      <div class="] flex-col justify-start items-center gap-8 inline-flex">
        <div
          class="w-24 h-24 md:w-28 md:h-28 flex items-center justify-center bg-[#d0fadf] rounded-full border-[12px] md:border-[16px] border-[#ebfdf2]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            class="h-10 w-10 text-green-700 md:w-12 md:h-12 md:stroke-[2]"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M4.5 12.75l6 6 9-13.5"></path>
          </svg>
        </div>
        <div
          class="self-stretch flex-col justify-start items-center gap-6 flex"
        >
          <div
            class="self-stretch text-center text-[#1d3557] text-3xl font-bold font-['Inter'] leading-9 max-w-lg"
          >
            Thank you for your submission!
          </div>
          <div
            class="w-full text-center text-[#2d3748] text-sm font-medium font-['Inter'] leading-[21px] max-w-md"
          >
            {
              pageState.estimateType === "roofing" ? (
                <div class="mb-8">
                  <p class="mb-4">
                    Please be on the lookout for a phone call and text message
                    in the next few minutes. Our roof repair and installation
                    team will be calling you to:
                  </p>
                  <ul class="text-left list-disc pl-6 space-y-2 my-4">
                    <li>Qualify your home</li>
                    <li>Get more background on your desired roofing project</li>
                    <li>
                      Schedule you for a free in-home consultation with one of
                      our experts
                    </li>
                  </ul>
                </div>
              ) : (
                <p class="mb-4">
                  We'll be in touch with matching pros in {pageState.city},{" "}
                  {pageState.state} shortly.
                </p>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</EstimateWrapper>

<script>
  import { estimateStore, estimateParser } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { shortTradeEnum } from "@assets/info/estimateOptions";
  import { actions } from "astro:actions";

  // Declare zaraz for TypeScript
  declare const zaraz:
    | {
        track: (eventName: string, data: any) => void;
      }
    | undefined;

  interface StoreWithIpAddress extends ReturnType<typeof estimateParser.parse> {
    ipAddress?: string | null;
  }

  class ThankYouController {
    private estimateType: string;

    constructor() {
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private async trackConversion(store: StoreWithIpAddress) {
      try {
        const response = await fetch(
          "https://google-advanced-conversions.zsmithbiz1.workers.dev/",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              system: {
                timestamp: new Date().toISOString(),
              },
              client: {
                email: store.email,
              },
            }),
          }
        );

        const hashedEmail = await response.text();
        const req = {
          event_name: "Lead",
          event_id: crypto.randomUUID(),
          event_time: new Date().toISOString(),
          action_source: "website",
          event_source_url: window.location.href,
          user_data: {
            sha256_email_address: hashedEmail,
            fbc: store.trackingParams?.fbc,
            fbp: store.trackingParams?.fbp,
            client_user_agent: window.navigator.userAgent,
            fn: store.firstName,
            ln: store.lastName,
            em: hashedEmail,
            ph: store.phone,
            external_id: store.trackingParams?.posthogPersonId,
          },
        };

        const eventName = `completed_${store.estimateShortTrade}_estimate`;
        zaraz?.track(eventName, req);
        console.log(`Zaraz event sent (${eventName}):`, req);
      } catch (error) {
        console.error("Error tracking conversion:", error);
      }
    }

    private initialize() {
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "thank-you",
        estimateType: validatedEstimateType.data,
      });

      // Process submission
      const store = estimateParser.parse(estimateStore.get());
      const ipAddress =
        document
          .querySelector("[data-ip-address]")
          ?.getAttribute("data-ip-address") || null;
      actions.processSubmission({ ...store, ipAddress });
      this.trackConversion({ ...store, ipAddress });
    }
  }

  new ThankYouController();
</script>
