---
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@models/estimateOptions";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";

interface PageState {
  estimateType: string;
  ipAddress: string | null;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams,
  request: Request
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, {
      status: 302,
      headers: { Location: appendQueryParams("/", searchParams) },
    });
  }

  return {
    estimateType: validatedEstimateType.data,
    ipAddress:
      Astro?.request?.headers?.get("cf-connecting-ip") ||
      Astro?.request?.headers?.get("x-real-ip") ||
      Astro?.request?.headers?.get("x-forwarded-for")?.split(",")[0] ||
      null,
  };
}

const pageState = initializePage(
  Astro.params,
  Astro.url.searchParams,
  Astro.request
);

if (pageState instanceof Response) {
  return pageState;
}
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <div
    class="w-full bg-white rounded-2xl md:shadow-[0px_2px_20px_0px_rgba(0,0,0,0.10)] md:p-8 mt-12"
    data-estimate-type={pageState.estimateType}
    data-ip-address={pageState.ipAddress}
  >
    <div class="flex flex-col items-center gap-8 max-w-2xl mx-auto">
      <div class="] flex-col justify-start items-center gap-8 inline-flex">
        <div
          class="w-24 h-24 md:w-28 md:h-28 flex items-center justify-center bg-[#d0fadf] rounded-full border-[12px] md:border-[16px] border-[#ebfdf2]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            class="h-10 w-10 text-green-700 md:w-12 md:h-12 md:stroke-[2]"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M4.5 12.75l6 6 9-13.5"></path>
          </svg>
        </div>
        <div
          class="self-stretch flex-col justify-start items-center gap-6 flex"
        >
          <div
            class="self-stretch text-center text-[#1d3557] text-3xl font-bold font-['Inter'] leading-9 max-w-lg"
          >
            Thank you for your submission!
          </div>
          <div
            class="w-full text-center text-[#2d3748] text-sm font-medium font-['Inter'] leading-[21px] max-w-md"
          >
            {
              pageState.estimateType === "roofing" ||
              pageState.estimateType === "siding" ? (
                <div class="mb-8">
                  <p class="mb-4">
                    Please be on the lookout for a phone call and text message
                    in the next few minutes. Our{" "}
                    {pageState.estimateType === "roofing" ? "roof" : "siding"}{" "}
                    repair and installation team will be calling you to:
                  </p>
                  <ul class="text-left list-disc pl-6 space-y-2 my-4">
                    <li>Qualify your home</li>
                    <li>
                      Get more background on your desired{" "}
                      {pageState.estimateType === "roofing"
                        ? "roofing"
                        : "siding"}{" "}
                      project
                    </li>
                    <li>
                      Schedule you for a free in-home consultation with one of
                      our experts
                    </li>
                  </ul>
                </div>
              ) : (
                <p class="mb-4" id="location-message">
                  We'll be in touch with matching pros shortly.
                </p>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</EstimateWrapper>

<script>
  import {
    estimateProgressStore,
    resetEstimateProgressFields,
  } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { shortTradeEnum } from "@models/estimateOptions";
  import { publicLeadsUpdateSchemaSchema } from "@models/supabase/schemas";
  import { supabase } from "@utils/supabase";
  import type { PublicLeadsUpdateSchema } from "@models/supabase/zodTypes";

  // Declare zaraz for TypeScript
  declare const zaraz:
    | {
        track: (eventName: string, data: any) => void;
      }
    | undefined;

  class ThankYouController {
    private estimateType: string;

    constructor() {
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private updateLocationMessage(lead: PublicLeadsUpdateSchema) {
      const messageElement = document.getElementById("location-message");
      if (messageElement && lead.city && lead.state) {
        messageElement.textContent = `We'll be in touch with matching pros in ${lead.city}, ${lead.state} shortly.`;
      }
    }

    private async trackConversion(lead: PublicLeadsUpdateSchema) {
      try {
        const response = await fetch(
          "https://google-advanced-conversions.zsmithbiz1.workers.dev/",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              system: {
                timestamp: new Date().toISOString(),
              },
              client: {
                email: lead.email,
              },
            }),
          }
        );

        const hashedEmail = await response.text();

        const eventName = `completed_${lead.estimate_type}_estimate`;
        const req = {
          event_name: eventName,
          event_id: crypto.randomUUID(),
          event_time: new Date().toISOString(),
          action_source: "website",
          event_source_url: window.location.href,

          user_data: {
            sha256_email_address: hashedEmail,
            fbc: lead.fbc,
            fbp: lead.fbp,
            client_user_agent: window.navigator.userAgent,
            fn: lead.first_name,
            ln: lead.last_name,
            em: hashedEmail,
            ph: lead.phone,
            external_id: lead.posthog_person_id,
          },
        };
        zaraz?.track(eventName, req);

        console.log(`Zaraz event sent (${eventName}):`, req);
      } catch (error) {
        console.error("Error tracking conversion:", error);
      }
    }

    private async initialize() {
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "thank-you",
        estimateType: validatedEstimateType.data,
      });

      // Process submission
      const validatedLead = publicLeadsUpdateSchemaSchema.parse(
        estimateProgressStore.get()
      );
      const ipAddress =
        document
          .querySelector("[data-ip-address]")
          ?.getAttribute("data-ip-address") || null;

      console.log("ipAddress", ipAddress);

      validatedLead.ip_address = ipAddress;

      // Update location message with store values
      this.updateLocationMessage(validatedLead);

      if (!validatedLead.submitted_at) {
        estimateProgressStore.set({
          ...validatedLead,
          status: "submitted",
          submitted_at: new Date().toISOString(),
        });
        try {
          const { data, error } = await supabase.functions.invoke(
            "submit-lead",
            {
              body: validatedLead,
            }
          );
          if (error) {
            throw new Error(error.message);
          }
          console.log("Lead submitted successfully: ", data);
        } catch (error) {
          console.error("Error submitting lead:", error);
        }

        this.trackConversion(validatedLead);
      }
    }
  }

  new ThankYouController();
</script>
