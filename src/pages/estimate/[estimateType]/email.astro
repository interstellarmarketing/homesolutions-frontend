---
import { estimateStore, estimateParser } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import {
  estimateStepsStore,
  getNextStep,
  getPreviousStep,
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@stores/estimateStepsStore";
import { appendQueryParams } from "@utils/queryParams";

/**
 * Processes the email form submission and handles final submission logic
 */
async function processEmailForm(
  formData: FormData,
  existingStore: Record<string, any>,
  estimateType: string
): Promise<Response | null> {
  const emailData = {
    email: formData.get("emailInput"),
  };

  const emailParsed = emailParser.safeParse(emailData);

  if (!emailParsed.success) {
    return null;
  }

  // Update store with new email
  const updatedStore = {
    ...existingStore,
    ...emailParsed.data,
  };

  estimateStore.set(updatedStore);

  // Get the next step from the store
  const validatedEstimateType = shortTradeEnum.safeParse(estimateType);
  if (validatedEstimateType.success) {
    const nextStep = getNextStep(validatedEstimateType.data, "email");

    if (nextStep) {
      const redirectUrl = `/estimate/${estimateType}/${nextStep}`;
      return new Response(null, {
        status: 302,
        headers: {
          Location: appendQueryParams(redirectUrl, Astro.url.searchParams),
        },
      });
    }
  }

  // Fallback to original logic
  const redirectUrl = `/estimate/${estimateType}/phone-number`;
  return Astro.redirect(appendQueryParams(redirectUrl, Astro.url.searchParams));
}

// Route parameter validation
const { estimateType } = Astro.params;
if (!estimateType) {
  return Astro.redirect("/");
}

const validatedEstimateType = shortTradeEnum.safeParse(estimateType);
if (validatedEstimateType.success) {
  // Update the estimate steps store with current page
  estimateStepsStore.set({
    currentStep: "email",
    estimateType: validatedEstimateType.data,
  });
}

// Initialize store and form state
const existingStore = estimateStore.get();
const { email } = existingStore;

// Create email-specific parser
const emailParser = estimateParser.pick({
  email: true,
});

// Validate existing email data
const existingEmailParsed = emailParser.safeParse({ email });

// Handle form submission
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const response = await processEmailForm(
    formData,
    existingStore,
    estimateType
  );
  if (response) return response;
}

// Get previous page URL for back button
const prevStep = validatedEstimateType.success
  ? getPreviousStep(validatedEstimateType.data, "email")
  : null;
const prevUrl = prevStep
  ? `/estimate/${estimateType}/${prevStep}`
  : `/estimate/${estimateType}/address`;

// Get step number and total from store
const stepNumber = validatedEstimateType.success
  ? getCurrentStepNumber(validatedEstimateType.data, "email")
  : 1;
const totalSteps = validatedEstimateType.success
  ? getStoreSteps(validatedEstimateType.data)
  : 5;

const getStepHeader = () => {
  switch (estimateType) {
    default:
      return "What's the best email to reach you?";
  }
};
const stepHeader = getStepHeader();
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
  <form method="post">
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      estimateType={estimateType}
      hasNextStep
      hasPrevStep={stepNumber > 1}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <div class="w-full mx-auto flex flex-col gap-2">
          <label
            for="emailInput"
            class="self-stretch text-[#111928] text-sm font-medium font-['Inter'] leading-[21px] text-left"
          >
            Your Email
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <img
                src="/static/mail-box.svg"
                alt="email icon"
                class="w-5 h-5"
              />
            </div>
            <input
              type="email"
              required
              class="w-full bg-gray-50 rounded-lg border border-gray-300 py-3.5 pl-10 pr-4 text-base font-normal font-['Inter'] leading-normal text-gray-500"
              placeholder="Enter email address"
              id="emailInput"
              name="emailInput"
              value={email ?? ""}
              autocomplete="email"
              aria-label="Email address"
            />
          </div>
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { estimateParser } from "@stores/estimateProgress";

  /**
   * Controller class for email form functionality
   * Handles validation and button state
   */
  class EmailFormController {
    private emailInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private emailParser = estimateParser.pick({ email: true });

    constructor() {
      // Initialize DOM elements
      this.emailInput = document.getElementById(
        "emailInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.initialize();
    }

    /**
     * Validates email format and updates button state
     */
    private handleEmailInput = (e: Event) => {
      const input = e.target as HTMLInputElement;

      // Validate email and update button state
      const isValid = this.emailParser.safeParse({
        email: input.value,
      }).success;

      if (this.submitButton) {
        this.submitButton.disabled = !isValid;
      }
    };

    /**
     * Initializes event listeners
     * Sets up email input handling and checks initial state
     */
    private initialize() {
      if (this.emailInput) {
        // Check initial value
        if (this.emailInput.value) {
          const isValid = this.emailParser.safeParse({
            email: this.emailInput.value,
          }).success;

          if (this.submitButton && isValid) {
            this.submitButton.disabled = false;
          }
        }

        this.emailInput.addEventListener("input", this.handleEmailInput);
      }
    }
  }

  // Initialize the form validator on both initial page load and client-side navigation
  document.addEventListener(
    "DOMContentLoaded",
    () => new EmailFormController()
  );
  document.addEventListener("astro:page-load", () => new EmailFormController());
</script>
