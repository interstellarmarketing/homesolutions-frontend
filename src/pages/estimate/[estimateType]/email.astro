---
import { shortTradeEnum } from "@models/estimateOptions";
import StepLayout from "@components/step-layout/index.astro";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";
// Create email-specific parser
const emailSchema = z.object({
  email: z.string().email(),
});

interface PageState {
  estimateType: string;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  // Get step information
  const estimateType = validatedEstimateType.data;
  const stepNumber = getCurrentStepNumber(estimateType, "email");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType,
    stepNumber,
    totalSteps,
  };
}

// Process the page based on the request method
let pageState: PageState | Response;

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const stepHeader = "What's the best email to reach you?";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="emailForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber <= pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <div class="w-full mx-auto flex flex-col gap-2">
          <label
            for="emailInput"
            class="self-stretch text-[#111928] text-sm font-medium font-['Inter'] leading-[21px] text-left"
          >
            Your Email
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <img
                src="/static/mail-box.svg"
                alt="email icon"
                class="w-5 h-5"
              />
            </div>
            <input
              type="email"
              required
              class="w-full bg-gray-50 rounded-lg border border-gray-300 py-3.5 pl-10 pr-4 text-base font-normal font-['Inter'] leading-normal text-gray-500"
              placeholder="Enter email address"
              id="emailInput"
              name="emailInput"
              autocomplete="email"
              aria-label="Email address"
            />
          </div>
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { estimateStore } from "@stores/estimateProgress";
  import { estimateParser } from "@models/estimateProgress";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import {
    getNextStep,
    getCurrentStepNumber,
    getTotalSteps,
  } from "@consts/estimateSteps";
  import { shortTradeEnum } from "@models/estimateOptions";
  import { navigate } from "astro:transitions/client";
  import { appendQueryParams } from "@utils/queryParams";

  /**
   * Controller class for email form functionality
   * Handles validation and button state
   */
  class EmailFormController {
    private emailInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private emailParser = estimateParser.pick({ email: true });
    private estimateType: string;

    constructor() {
      // Initialize DOM elements
      this.emailInput = document.getElementById(
        "emailInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById("emailForm") as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    /**
     * Validates email format and updates button state
     */
    private handleEmailInput = (e: Event) => {
      const input = e.target as HTMLInputElement;

      // Validate email and update button state
      const isValid = this.emailParser.safeParse({
        email: input.value,
      }).success;

      if (this.submitButton) {
        this.submitButton.setAttribute(
          "aria-disabled",
          !isValid ? "true" : "false"
        );
      }
    };

    /**
     * Initializes event listeners and store state
     */
    private initialize() {
      if (!this.emailInput || !this.form || !this.estimateType) return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "email",
        estimateType: validatedEstimateType.data,
      });

      // Set email value from store data if available
      const storeData = estimateStore.get();
      if (storeData.email) {
        this.emailInput.value = storeData.email;
      }

      // Update step info
      const stepNumber = getCurrentStepNumber(
        validatedEstimateType.data,
        "email"
      );
      const totalSteps = getTotalSteps(validatedEstimateType.data);
      document
        .querySelector("[data-step-number]")
        ?.setAttribute("data-step-number", String(stepNumber));
      document
        .querySelector("[data-total-steps]")
        ?.setAttribute("data-total-steps", String(totalSteps));

      // Check initial value
      if (this.emailInput.value) {
        const isValid = this.emailParser.safeParse({
          email: this.emailInput.value,
        }).success;

        if (this.submitButton && isValid) {
          this.submitButton.setAttribute("aria-disabled", "false");
        }
      }

      // Set up event listeners
      this.emailInput.addEventListener("input", this.handleEmailInput);
      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }

    private handleSubmit = (e: Event) => {
      e.preventDefault();

      if (!this.form || !this.emailInput) return;

      const emailValue = this.emailInput.value;
      const emailParsed = this.emailParser.safeParse({ email: emailValue });

      if (emailParsed.success) {
        // Update store
        const existingStore = estimateStore.get();
        estimateStore.set({
          ...existingStore,
          email: emailValue,
        });

        // Get next step
        const validatedEstimateType = shortTradeEnum.safeParse(
          this.estimateType
        );
        if (validatedEstimateType.success) {
          const nextStep = getNextStep(validatedEstimateType.data, "email");
          if (nextStep) {
            const currentUrl = new URL(window.location.href);
            navigate(
              appendQueryParams(
                `/estimate/${this.estimateType}/${nextStep}`,
                new URLSearchParams(currentUrl.search)
              )
            );
            return;
          }
        }
      }
    };
  }

  crossPlatformLoader(() => new EmailFormController());
</script>
