---
import { z } from "zod";
import { estimateStore } from "@stores/estimateProgress";
import {
  estimateStepsStore,
  getNextStep,
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@stores/estimateStepsStore";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { ProcessEstimateType } from "@utils/kv/estimateTypeReset";
import { formSubmissionParser } from "be-rpc-estimates/src/zoddles/form-submission/formSubmissionType";
import StepLayout from "@components/step-layout/index.astro";
import { appendQueryParams } from "@utils/queryParams";

// Validation schemas
const zipSchema = formSubmissionParser.pick({ zipCode: true });
const estimateTypeSchema = shortTradeEnum;

// Initialize ZIP service
const zipService = await Astro.locals.runtime.env.ZIP_METHODS.newZipMethods();

// Validate estimate type from URL params
const { estimateType } = Astro.params;
const parsedEstimateType = estimateTypeSchema.safeParse(estimateType);

if (!estimateType || !parsedEstimateType.success) {
  console.error("Invalid estimate type");
  return new Response(null, {
    status: 302,
    headers: { Location: "/" },
  });
}

const validatedEstimateType = parsedEstimateType.data;
ProcessEstimateType(validatedEstimateType);

// Get stored data
const existingStore = estimateStore.get();

// Update the estimate steps store with current page
estimateStepsStore.set({
  currentStep: "zip",
  estimateType: validatedEstimateType,
});

// Get user location from Cloudflare
const cfPostalCode = z.string().safeParse(Astro.locals.runtime.cf?.postalCode);
// Initialize zip code from store or Cloudflare location
const initialZipCode = existingStore.zipCode ?? cfPostalCode.data;

// Get step number and total steps from the store
const stepNumber = getCurrentStepNumber(validatedEstimateType, "zip");
const totalSteps = getStoreSteps(validatedEstimateType);

// Handle form submission
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const submission = {
    zipCode: formData?.get("zipInput") as string,
    trustedFormCertUrl: formData?.get("xxTrustedFormCertUrl") as string,
    trustedFormPingUrl: formData?.get("xxTrustedFormPingUrl") as string,
  };
  const parsedZip = zipSchema.safeParse({ zipCode: submission.zipCode });

  if (parsedZip.success) {
    const zipCode = parsedZip.data.zipCode;

    try {
      const locationData = await zipService.uspsZipCheck(zipCode);

      if (!locationData?.defaultState || !locationData?.defaultCity) {
        throw new Error("Invalid ZIP code location data");
      }

      estimateStore.set({
        ...existingStore,
        zipCode,
        state: locationData.defaultState,
        city: locationData.defaultCity,
        estimateShortTrade: validatedEstimateType,
        trackingParams: {
          ...existingStore.trackingParams,
          trustedFormCertUrl: submission.trustedFormCertUrl || undefined,
          trustedFormPingUrl: submission.trustedFormPingUrl || undefined,
        },
      });

      // Get the next step from the store
      const nextStep = getNextStep(validatedEstimateType, "zip");

      if (nextStep) {
        const redirectUrl = `/estimate/${validatedEstimateType}/${nextStep}`;
        return new Response(null, {
          status: 302,
          headers: {
            Location: appendQueryParams(redirectUrl, Astro.url.searchParams),
          },
        });
      }

      // Fallback to original logic if next step not found
      if (estimateType === "roofing") {
        const redirectUrl = `/estimate/${validatedEstimateType}/project-details`;
        return new Response(null, {
          status: 302,
          headers: {
            Location: appendQueryParams(redirectUrl, Astro.url.searchParams),
          },
        });
      }

      return new Response(null, {
        status: 302,
        headers: {
          Location: appendQueryParams(
            `/estimate/${validatedEstimateType}/action`,
            Astro.url.searchParams
          ),
        },
      });
    } catch (error) {
      console.error("ZIP validation error:", error);
      return new Response("Invalid ZIP code", {
        status: 400,
        statusText: "Invalid ZIP code or service unavailable",
      });
    }
  }
}

// Helper function to format estimate type display
const formatEstimateTypeNoun = (type: string) =>
  type.endsWith("s") ? type.slice(0, -1) : type;
---

<EstimateWrapper
  title={validatedEstimateType}
  estimateType={validatedEstimateType}
>
  <form method="post">
    <StepLayout
      stepHeader={`Let's find your local ${formatEstimateTypeNoun(validatedEstimateType)} pros`}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      hasNextStep
      hasPrevStep={stepNumber > 1}
      estimateType={validatedEstimateType}
      delaySubmit={true}
      loadingButtonText="Validating your zip code..."
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <h2 class="text-xl font-black"></h2>

        <div
          class="flex flex-col items-start text-center gap-4 w-full mx-auto max-w-md"
        >
          <!-- Hidden TrustedForm fields -->
          <input type="hidden" name="xxTrustedFormCertUrl" />
          <input type="hidden" name="xxTrustedFormPingUrl" />

          <p class="text-[#111928] text-sm font-medium leading-[21px]">
            Enter the location of your project
          </p>

          <div class="w-full relative">
            <img
              src="/static/map-pin-alt.svg"
              alt="location pin"
              class="absolute left-4 top-1/2 -translate-y-1/2"
            />
            <input
              type="text"
              required
              id="zipInput"
              name="zipInput"
              placeholder="Enter your zip code"
              value={initialZipCode ?? null}
              class="w-full h-[52px] pl-14 pr-4 py-3.5 bg-gray-50 rounded-lg border border-gray-300 text-gray-500 text-base font-normal leading-normal"
              minlength="5"
              maxlength="5"
              pattern="[0-9]{5}"
              inputmode="numeric"
            />
          </div>
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import { z } from "zod";

  const ZIP_LENGTH = 5;

  const validators = {
    zipString: z.string().length(ZIP_LENGTH),
    zipNumber: z.coerce.number(),
  };

  class ZipFormValidator {
    private zipInput: HTMLInputElement;
    private submitButton: HTMLButtonElement;

    constructor(zipInputId: string, submitButtonId: string) {
      this.zipInput = document.getElementById(zipInputId) as HTMLInputElement;
      this.submitButton = document.getElementById(
        submitButtonId
      ) as HTMLButtonElement;

      if (this.zipInput && this.submitButton) {
        this.initialize();
      }
    }

    private initialize() {
      // Check initial value
      if (this.zipInput.value) {
        const isValid =
          validators.zipString.safeParse(this.zipInput.value).success &&
          validators.zipNumber.safeParse(this.zipInput.value).success;

        this.toggleSubmitButton(isValid);
      }

      // Set up event listeners
      this.zipInput.addEventListener("input", (event) => {
        const input = (event.target as HTMLInputElement).value;
        this.validateZipCode(input);
      });
    }

    private validateZipCode(input: string) {
      const isValid =
        validators.zipString.safeParse(input).success &&
        validators.zipNumber.safeParse(input).success;

      this.toggleSubmitButton(isValid);
    }

    private toggleSubmitButton(isValid: boolean) {
      if (isValid) {
        this.submitButton.removeAttribute("disabled");
      } else {
        this.submitButton.setAttribute("disabled", "");
      }
    }
  }

  function initZipValidator() {
    new ZipFormValidator("zipInput", "nextStepButton");
  }

  crossPlatformLoader(() => initZipValidator());
</script>
