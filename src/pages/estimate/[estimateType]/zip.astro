---
import { z } from "zod";
import { estimateStore } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { ProcessEstimateType } from "@utils/kv/estimateTypeReset";
import { formSubmissionParser } from "be-rpc-estimates/src/zoddles/form-submission/formSubmissionType";
import StepLayout from "@components/step-layout/index.astro";
import { getTotalSteps } from "@utils/layout";

// Validation schemas
const zipSchema = formSubmissionParser.pick({ zipCode: true });
const estimateTypeSchema = shortTradeEnum;

// Initialize ZIP service
const zipService = await Astro.locals.runtime.env.ZIP_METHODS.newZipMethods();

// Validate estimate type from URL params
const { estimateType } = Astro.params;
const parsedEstimateType = estimateTypeSchema.safeParse(estimateType);

if (!estimateType || !parsedEstimateType.success) {
  console.error("Invalid estimate type");
  return Astro.redirect("/");
}

const validatedEstimateType = parsedEstimateType.data;
ProcessEstimateType(validatedEstimateType);

// Get stored data
const existingStore = estimateStore.get();

// Get user location from Cloudflare
const cfPostalCode = z.string().safeParse(Astro.locals.runtime.cf?.postalCode);
// Initialize zip code from store or Cloudflare location
const initialZipCode = existingStore.zipCode ?? cfPostalCode.data;

const getStepNumber = () => {
  switch (validatedEstimateType) {
    case "roofing":
      return 1;
    default:
      return 1;
  }
};

const stepNumber = getStepNumber();
const totalSteps = getTotalSteps(validatedEstimateType);

// Handle form submission
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const submission = {
    zipCode: formData?.get("zipInput") as string,
    trustedFormCertUrl: formData?.get("xxTrustedFormCertUrl") as string,
    trustedFormPingUrl: formData?.get("xxTrustedFormPingUrl") as string,
  };
  const parsedZip = zipSchema.safeParse({ zipCode: submission.zipCode });

  if (parsedZip.success) {
    const zipCode = parsedZip.data.zipCode;

    try {
      const locationData = await zipService.uspsZipCheck(zipCode);

      if (!locationData?.defaultState || !locationData?.defaultCity) {
        throw new Error("Invalid ZIP code location data");
      }

      estimateStore.set({
        ...existingStore,
        zipCode,
        state: locationData.defaultState,
        city: locationData.defaultCity,
        estimateShortTrade: validatedEstimateType,
        trackingParams: {
          ...existingStore.trackingParams,
          trustedFormCertUrl: submission.trustedFormCertUrl || undefined,
          trustedFormPingUrl: submission.trustedFormPingUrl || undefined,
        },
      });

      if (estimateType === "roofing") {
        return Astro.redirect(
          `/estimate/${validatedEstimateType}/project-details`
        );
      }

      return Astro.redirect(`/estimate/${validatedEstimateType}/action`);
    } catch (error) {
      console.error("ZIP validation error:", error);
      return new Response("Invalid ZIP code", {
        status: 400,
        statusText: "Invalid ZIP code or service unavailable",
      });
    }
  }
}

// Helper function to format estimate type display
const formatEstimateTypeNoun = (type: string) =>
  type.endsWith("s") ? type.slice(0, -1) : type;
---

<EstimateWrapper
  title={validatedEstimateType}
  estimateType={validatedEstimateType}
>
  <form method="post">
    <StepLayout
      stepHeader={`Let's find your local ${formatEstimateTypeNoun(validatedEstimateType)} pros`}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      hasNextStep
      hasPrevStep={stepNumber > 1}
      estimateType={validatedEstimateType}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <h2 class="text-xl font-black"></h2>

        <div
          class="flex flex-col items-start text-center gap-4 w-full mx-auto max-w-md"
        >
          <!-- Hidden TrustedForm fields -->
          <input type="hidden" name="xxTrustedFormCertUrl" />
          <input type="hidden" name="xxTrustedFormPingUrl" />

          <p class="text-[#111928] text-sm font-medium leading-[21px]">
            Enter the location of your project
          </p>

          <div class="w-full relative">
            <img
              src="/static/map-pin-alt.svg"
              alt="location pin"
              class="absolute left-4 top-1/2 -translate-y-1/2"
            />
            <input
              type="text"
              required
              id="zipInput"
              name="zipInput"
              placeholder="Enter your zip code"
              value={initialZipCode ?? null}
              class="w-full h-[52px] pl-14 pr-4 py-3.5 bg-gray-50 rounded-lg border border-gray-300 text-gray-500 text-base font-normal leading-normal"
              minlength="5"
              maxlength="5"
              pattern="[0-9]{5}"
              inputmode="numeric"
            />
          </div>

          <!-- {existingStore.city && existingStore.state && (
                        <div class="flex gap-2 items-center">
                            <p>{existingStore.city}, {existingStore.state}</p>
                            <svg
                                width="15"
                                height="15"
                                viewBox="0 0 15 15"
                                class="text-green-600"
                                fill="none"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                <path
                                    d="M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z"
                                    fill="currentColor"
                                    fill-rule="evenodd"
                                    clip-rule="evenodd"
                                />
                            </svg>
                        </div>
                    )} -->
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { z } from "zod";

  const ZIP_LENGTH = 5;

  const validators = {
    zipString: z.string().length(ZIP_LENGTH),
    zipNumber: z.coerce.number(),
  };

  class ZipFormValidator {
    private zipInput: HTMLInputElement;
    private submitButton: HTMLButtonElement;

    constructor(zipInputId: string, submitButtonId: string) {
      this.zipInput = document.getElementById(zipInputId) as HTMLInputElement;
      this.submitButton = document.getElementById(
        submitButtonId
      ) as HTMLButtonElement;

      if (this.zipInput && this.submitButton) {
        this.initialize();
      }
    }

    private initialize() {
      // Check initial value
      if (this.zipInput.value) {
        const isValid =
          validators.zipString.safeParse(this.zipInput.value).success &&
          validators.zipNumber.safeParse(this.zipInput.value).success;

        this.toggleSubmitButton(isValid);
      }

      // Set up event listeners
      this.zipInput.addEventListener("input", (event) => {
        const input = (event.target as HTMLInputElement).value;
        this.validateZipCode(input);
      });
    }

    private validateZipCode(input: string) {
      const isValid =
        validators.zipString.safeParse(input).success &&
        validators.zipNumber.safeParse(input).success;

      this.toggleSubmitButton(isValid);
    }

    private toggleSubmitButton(isValid: boolean) {
      if (isValid) {
        this.submitButton.removeAttribute("disabled");
      } else {
        this.submitButton.setAttribute("disabled", "");
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new ZipFormValidator("zipInput", "nextStepButton");
  });
</script>
