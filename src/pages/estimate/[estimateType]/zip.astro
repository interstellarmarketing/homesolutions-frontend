---
import { z } from "zod";
import { estimateStore } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { ProcessEstimateType } from "@utils/kv/estimateTypeReset";
import { formSubmissionParser } from "be-rpc-estimates/src/zoddles/form-submission/formSubmissionType";

// Validation schemas
const zipSchema = formSubmissionParser.pick({ zipCode: true });
const estimateTypeSchema = shortTradeEnum;

// Initialize ZIP service
const zipService = await Astro.locals.runtime.env.ZIP_METHODS.newZipMethods();

// Validate estimate type from URL params
const { estimateType } = Astro.params;
const parsedEstimateType = estimateTypeSchema.safeParse(estimateType);

if (!estimateType || !parsedEstimateType.success) {
    console.error("Invalid estimate type");
    return Astro.redirect("/");
}

const validatedEstimateType = parsedEstimateType.data;
ProcessEstimateType(validatedEstimateType);

// Get stored data
const existingStore = estimateStore.get();

// Get user location from Cloudflare
const cfPostalCode = z.string()
    .safeParse(Astro.locals.runtime.cf?.postalCode)
// Initialize zip code from store or Cloudflare location
const initialZipCode = existingStore.zipCode ?? cfPostalCode.data

// Handle form submission
if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const submission = { 
        zipCode: formData?.get("zipInput") as string,
        trustedFormCertUrl: formData?.get("xxTrustedFormCertUrl") as string,
        trustedFormPingUrl: formData?.get("xxTrustedFormPingUrl") as string
    };
    const parsedZip = zipSchema.safeParse({ zipCode: submission.zipCode });

    if (parsedZip.success) {
        const zipCode = parsedZip.data.zipCode;
        
        try {
            const locationData = await zipService.uspsZipCheck(zipCode);
            
            if (!locationData?.defaultState || !locationData?.defaultCity) {
                throw new Error('Invalid ZIP code location data');
            }

            estimateStore.set({
                ...existingStore,
                zipCode,
                state: locationData.defaultState,
                city: locationData.defaultCity,
                estimateShortTrade: validatedEstimateType,
                trackingParams: {
                    ...existingStore.trackingParams,
                    trustedFormCertUrl: submission.trustedFormCertUrl || undefined,
                    trustedFormPingUrl: submission.trustedFormPingUrl || undefined
                }
            });

			if (estimateType === 'roofing') {
				return Astro.redirect(`/estimate/${validatedEstimateType}/project-details`);
			}

            return Astro.redirect(`/estimate/${validatedEstimateType}/action`);
        } catch (error) {
            console.error('ZIP validation error:', error);
            return new Response('Invalid ZIP code', {
                status: 400,
                statusText: 'Invalid ZIP code or service unavailable'
            });
        }
    }
}

// Helper function to format estimate type display
const formatEstimateTypeNoun = (type: string) => 
    type.endsWith("s") ? type.slice(0, -1) : type;
---

<EstimateWrapper title={validatedEstimateType} estimateType={validatedEstimateType}>
    <div class="flex flex-col gap-4 text-center border rounded-lg p-8 container">
        <h2 class="text-xl font-black">
            Let's find your local {formatEstimateTypeNoun(validatedEstimateType)} pros
        </h2>
        
        <p>Enter the location of your project</p>
        
        <form class="flex flex-col items-center text-center gap-4 my-4" method="post">
            <!-- Hidden TrustedForm fields - Will be auto-populated by the script above -->
            <input type="hidden" name="xxTrustedFormCertUrl" />
            <input type="hidden" name="xxTrustedFormPingUrl" />
            
            <input
                type="text"
                required
                id="zipInput"
                name="zipInput"
                placeholder="zip code"
                value={initialZipCode ?? null}
                class="bg-transparent rounded-lg border py-2 px-4 text-center max-w-2/3"
                minlength="5"
                maxlength="5"
                pattern="[0-9]{5}"
                inputmode="numeric"
            />
            
            {existingStore.city && existingStore.state && (
                <div class="flex gap-2 items-center">
                    <p>{existingStore.city}, {existingStore.state}</p>
                    <svg
							width="15"
							height="15"
							viewBox="0 0 15 15"
							class="text-green-600"
							fill="none"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								d="M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z"
								fill="currentColor"
								fill-rule="evenodd"
								clip-rule="evenodd"
							/>
						</svg>
                </div>
            )}
            
            <button
                type="submit"
                id="zipSubmitButton"
                disabled={initialZipCode?.length !== 5}
                class="rounded-lg px-6 py-2 border disabled:opacity-20"
            >
                next
            </button>
        </form>
    </div>
</EstimateWrapper>

<script>
    import { z } from "zod";

    const ZIP_LENGTH = 5;
    
    const validators = {
        zipString: z.string().length(ZIP_LENGTH),
        zipNumber: z.coerce.number()
    };

    class ZipFormValidator {
        private zipInput: HTMLInputElement;
        private submitButton: HTMLButtonElement;

        constructor(zipInputId: string, submitButtonId: string) {
            this.zipInput = document.getElementById(zipInputId) as HTMLInputElement;
            this.submitButton = document.getElementById(submitButtonId) as HTMLButtonElement;

            if (this.zipInput && this.submitButton) {
                this.initializeEventListeners();
            }
        }

        private initializeEventListeners() {
            this.zipInput.addEventListener("input", (event) => {
                const input = (event.target as HTMLInputElement).value;
                this.validateZipCode(input);
            });
        }

        private validateZipCode(input: string) {
            const isValid = validators.zipString.safeParse(input).success &&
                          validators.zipNumber.safeParse(input).success;

            this.toggleSubmitButton(isValid);
        }

        private toggleSubmitButton(isValid: boolean) {
            if (isValid) {
                this.submitButton.removeAttribute("disabled");
            } else if (!this.submitButton.hasAttribute("disabled")) {
                this.submitButton.setAttribute("disabled", "");
            }
        }
    }

    // Initialize form validation
    new ZipFormValidator("zipInput", "zipSubmitButton");
</script>
