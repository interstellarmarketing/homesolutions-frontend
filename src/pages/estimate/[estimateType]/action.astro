---
/**
 * Estimate Action Page
 *
 * This page handles the selection of specific actions for different types of estimates.
 * It's part of a multi-step estimate process that includes:
 * 1. Estimate type selection
 * 2. ZIP code validation
 * 3. Action selection (current page)
 * 4. Project details
 */

import {
  shortTradeEnum,
  tradeOptionDescriptions,
} from "@assets/info/estimateOptions";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import StepLayout from "@components/step-layout/index.astro";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";

// Schema definitions
const actionSchema = z.string();
const estimateTypeSchema = shortTradeEnum;

interface PageState {
  estimateType: string;
  estimateAction: string | undefined;
  stepNumber: number;
  totalSteps: number;
  options: string[];
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const estimateTypeResult = estimateTypeSchema.safeParse(params.estimateType);

  // Redirect to home if estimate type is invalid
  if (!params.estimateType || !estimateTypeResult.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  const estimateType = estimateTypeResult.data;

  // Get trade-specific options from computedEstimateOptions
  let options: string[] = [];

  // This is a simplified approach, the actual options should be derived from the store in client-side
  if (estimateType === "roofing") {
    options = ["repair", "replace", "install"];
  } else if (estimateType === "solar") {
    options = ["install", "expand"];
  } else {
    options = ["install", "repair", "replace"];
  }

  // Get step information
  const stepNumber = getCurrentStepNumber(estimateType, "action");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType,
    estimateAction: searchParams.get("action") || undefined,
    stepNumber,
    totalSteps,
    options,
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  try {
    const formData = await request.formData();
    const action = actionSchema.parse(formData.get("action"));

    // Pass action as URL parameter
    const url = new URL(request.url);
    url.searchParams.set("action", action);

    // The next step will be determined client-side
    const redirectUrl = `/estimate/${estimateType}/`;
    return new Response(null, {
      status: 302,
      headers: {
        Location: appendQueryParams(redirectUrl, url.searchParams),
      },
    });
  } catch (error) {
    console.error("Form submission error:", error);
    return null;
  }
}

// Process the page based on the request method
let pageState: PageState | Response;
if (Astro.request.method === "POST") {
  const result = await handleFormSubmission(
    Astro.request,
    Astro.params.estimateType || ""
  );
  if (result) {
    return result;
  }
}

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const getStepHeader = () => {
  switch (pageState.estimateType) {
    case "roofing": {
      const tradeOptions = tradeOptionDescriptions.find(
        (trade) => trade.shortTrade === pageState.estimateType
      );
      return tradeOptions?.actionDescription ?? "";
    }
    default:
      return "What type of project are you looking to complete?";
  }
};

const stepHeader = getStepHeader();
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="actionForm"
    data-estimate-type={pageState.estimateType}
  >
    <!-- Add hidden input for initial state -->
    <input
      type="hidden"
      id="hasInitialSelection"
      value={pageState.estimateAction ? "true" : "false"}
    />

    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber < pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={pageState.options}
        name="action"
        currentSelection={pageState.estimateAction}
        layout="grid2"
        capitalize={true}
      />
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { estimateStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { getNextStep } from "@consts/estimateSteps";
  import { shortTradeEnum } from "@assets/info/estimateOptions";
  import {
    activeEstimateTypeStore,
    computedEstimateOptions,
  } from "@stores/activeEstimateType";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  /**
   * Client-side form validation and button state management
   */
  class FormController {
    private radioButtons: NodeListOf<HTMLInputElement>;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private estimateType: string;

    constructor() {
      this.radioButtons = document.querySelectorAll('input[name="action"]');
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById("actionForm") as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private initialize() {
      if (
        !this.submitButton ||
        !this.radioButtons.length ||
        !this.form ||
        !this.estimateType
      )
        return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "action",
        estimateType: validatedEstimateType.data,
      });

      // Initialize active estimate type store
      activeEstimateTypeStore.set(validatedEstimateType.data);

      // Check hidden field for initial state
      const hasInitialSelection =
        document
          .getElementById("hasInitialSelection")
          ?.getAttribute("value") === "true";
      if (hasInitialSelection) {
        this.submitButton.setAttribute("aria-disabled", "false");
      }

      this.radioButtons.forEach((radio) => {
        radio.addEventListener("change", () => this.handleRadioChange());
      });

      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }

    private handleRadioChange() {
      if (!this.submitButton) return;
      const isSelected = Array.from(this.radioButtons).some(
        (radio) => radio.checked
      );
      this.submitButton.setAttribute(
        "aria-disabled",
        !isSelected ? "true" : "false"
      );
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form) return;

      const action = Array.from(this.radioButtons).find(
        (radio) => radio.checked
      )?.value;

      if (!action) return;

      // Update store
      const existingStore = estimateStore.get();
      estimateStore.set({
        ...existingStore,
        estimateAction: action,
      });

      // Get next step
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(validatedEstimateType.data, "action");
        if (nextStep) {
          const url = new URL(window.location.href);
          url.pathname = `/estimate/${this.estimateType}/${nextStep}`;
          window.location.href = url.toString();
          return;
        }
      }

      // Fallback logic
      if (this.estimateType === "roofing") {
        const url = new URL(window.location.href);
        url.pathname = `/estimate/${this.estimateType}/home-type`;
        window.location.href = url.toString();
        return;
      }

      const url = new URL(window.location.href);
      url.pathname = `/estimate/${this.estimateType}/project-details`;
      window.location.href = url.toString();
    }
  }

  crossPlatformLoader(() => new FormController());
</script>
