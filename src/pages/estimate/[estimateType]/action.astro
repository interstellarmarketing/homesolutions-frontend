---
import { z } from "zod";
import Layout from "@layouts/Layout.astro";
import { estimateStore } from "@stores/estimateProgress";
import { actions } from "astro:actions";
import {
	shortTradeEnum,
	getOptionsForShortTrade,
} from "@assets/info/estimateOptions";
import { activeEstimateTypeStore } from "@stores/activeEstimateType";

let { estimateType } = Astro.params;

const parseEstimateType = shortTradeEnum.safeParse(estimateType);

if (!estimateType || !parseEstimateType.success) {
	return Astro.redirect("/");
}

estimateType = parseEstimateType.data;

const existingStore = estimateStore.get();
const activeEstimateType = activeEstimateTypeStore.get();
console.log({ activeEstimateType });

let { estimateAction } = existingStore;

if (!existingStore?.zipCode?.length) {
	return Astro.redirect(`/estimate/${estimateType}/zip`);
}

const { data, error } = await Astro.callAction(
	actions.estimateOptions.estimateOptionsReformatted,
	{ shortTrade: estimateType },
);

if (error) {
	throw new Error(JSON.stringify(error));
}

const estimateOptions = getOptionsForShortTrade(
	parseEstimateType.data,
	"estimateAction",
);

if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();

	const actionParser = z.string();

	const actionParsed = actionParser.safeParse(formData.get("action"));

	if (actionParsed?.success) {
		estimateAction = actionParsed?.data;

		estimateStore.set({
			...existingStore,
			estimateAction,
		});
		return Astro.redirect(
			`/estimate/${estimateType}/projectDetails`,
		);

		console.log({ activeEstimateType });
		// INFO: whether we need additional details
		//if (activeEstimateType?.data?.type?.length) {
		//	return Astro.redirect(
		//		`/estimate/${estimateType}/projectDetails`,
		//	);
		//} else {
		//	return Astro.redirect(
		//		`/estimate/${estimateType}/address`,
		//	);
		//}
	}
}
---

<Layout title={estimateType}>
	<div
		class="flex flex-col gap-4 text-center border rounded-lg p-8 container"
	>
		<h2 class="text-xl font-black">
			{data.actionDescription}
		</h2>
		<form
			class="flex flex-col items-center text-center gap-4 my-4"
			method="post"
		>
			<div class="grid grid-cols-2 gap-4 p-8">
				{
					estimateOptions.map((actionOption) => {
						return (
							<label class="inline-flex items-center ">
								<input
									type="radio"
									name="action"
									checked={
										existingStore.estimateAction ===
										actionOption
									}
									value={
										actionOption
									}
									class="hidden peer"
								/>
								<span class="px-4 w-full py-2 rounded-md bg-gray-200 text-gray-700 cursor-pointer peer-checked:bg-blue-500 peer-checked:text-white transition-colors">
									{
										actionOption
									}
								</span>
							</label>
						);
					})
				}
			</div>
			<div class="flex gap-4 items-center">
				<a
					href={`/estimate/${estimateType}/zip`}
					class="rounded-lg px-6 py-2 border disabled:opacity-20"
				>
					prev
				</a>
				<button
					type="submit"
					id="actionSubmitButton"
					class="rounded-lg px-6 py-2 border disabled:opacity-20"
					disabled
				>
					next
				</button>
			</div>
		</form>
	</div>
</Layout>

<script>
	const radioButtons = document.querySelectorAll(
		'input[name="action"]',
	) as NodeListOf<HTMLInputElement>;
	const submitButton = document.getElementById(
		"actionSubmitButton",
	) as HTMLButtonElement | null;

	if (radioButtons && submitButton) {
		radioButtons.forEach((radioButton) => {
			radioButton.addEventListener("change", () => {
				const selectedValue = document.querySelector(
					'input[name="action"]:checked',
				) as HTMLInputElement | null;

				if (selectedValue) {
					submitButton.removeAttribute(
						"disabled",
					);
				} else {
					submitButton.setAttribute(
						"disabled",
						"",
					);
				}
			});
		});
	}
</script>
