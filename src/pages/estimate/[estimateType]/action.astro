---
/**
 * Estimate Action Page
 * 
 * This page handles the selection of specific actions for different types of estimates.
 * It's part of a multi-step estimate process that includes:
 * 1. Estimate type selection
 * 2. ZIP code validation
 * 3. Action selection (current page)
 * 4. Project details
 */

import { z } from "zod";
import { estimateStore } from "@stores/estimateProgress";
import {
	shortTradeEnum,
	tradeOptionDescriptions,
} from "@assets/info/estimateOptions";
import {
	activeEstimateTypeStore,
	computedEstimateOptions,
} from "@stores/activeEstimateType";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";

// Schema definitions
const actionSchema = z.string();
const estimateTypeSchema = shortTradeEnum;

// Extract and validate URL parameters
const { estimateType: rawEstimateType } = Astro.params;
const estimateTypeResult = estimateTypeSchema.safeParse(rawEstimateType);

// Redirect to home if estimate type is invalid
if (!rawEstimateType || !estimateTypeResult.success) {
	return Astro.redirect("/");
}

const estimateType = estimateTypeResult.data;

// Get store data
const existingStore = estimateStore.get();
const activeEstimateType = activeEstimateTypeStore.get();
const activeEstimateOptions = computedEstimateOptions.get();

// Validation checks
if (!activeEstimateOptions) {
	console.error("Missing active estimate options");
	return Astro.redirect("/");
}

if (!existingStore?.zipCode?.length) {
	return Astro.redirect(`/estimate/${estimateType}/zip`);
}

// Get trade-specific options
const tradeOptions = tradeOptionDescriptions.find(
	(trade) => trade.shortTrade === activeEstimateType
);

// Handle form submission
if (Astro.request.method === "POST") {
	try {
		const formData = await Astro.request.formData();
		const action = actionSchema.parse(formData.get("action"));
		
		estimateStore.set({
			...existingStore,
			estimateAction: action,
		});

		if (estimateType === 'roofing') {
			return Astro.redirect(`/estimate/${estimateType}/home-type`);
		}

		return Astro.redirect(`/estimate/${estimateType}/projectDetails`);
	} catch (error) {
		console.error("Form submission error:", error);
		// Could add error handling here
	}
}

// Validate existing action if present
const existingActionValid = actionSchema.safeParse(existingStore.estimateAction).success;
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
	<div
		class="flex flex-col gap-4 text-center border rounded-lg p-8 container"
	>
		<h2 class="text-xl font-black">
			{tradeOptions?.actionDescription}
		</h2>
		<form
			class="flex flex-col items-center text-center gap-4 my-4"
			method="post"
		>
			<div class="grid grid-cols-2 gap-4 p-8">
				{
					activeEstimateOptions.data.estimateAction.map(
						(actionOption) => {
							return (
								<label class="inline-flex items-center ">
									<input
										type="radio"
										name="action"
										checked={
											existingStore.estimateAction ===
											actionOption
										}
										value={
											actionOption
										}
										class="hidden peer"
									/>
									<span class="px-4 w-full py-2 rounded-md bg-gray-200 text-gray-700 cursor-pointer peer-checked:bg-blue-500 peer-checked:text-white transition-colors">
										{
											actionOption
										}
									</span>
								</label>
							);
						},
					)
				}
			</div>
			<div class="flex gap-4 items-center">
				<a
					href="javascript:history.back()"
					class="rounded-lg px-6 py-2 border hover:bg-gray-100 transition-colors"
				>
					Previous
				</a>
				<button
					type="submit"
					id="actionSubmitButton"
					class="rounded-lg px-6 py-2 border disabled:opacity-20 hover:bg-blue-50 transition-colors"
					disabled={!existingActionValid}
				>
					Next
				</button>
			</div>
		</form>
	</div>
</EstimateWrapper>

<script>
/**
 * Client-side form validation and button state management
 */
const initializeFormValidation = () => {
	const radioButtons = document.querySelectorAll<HTMLInputElement>('input[name="action"]');
	const submitButton = document.getElementById('actionSubmitButton') as HTMLButtonElement | null;

	if (!radioButtons || !submitButton) {
		console.error('Required form elements not found');
		return;
	}

	const updateSubmitButtonState = () => {
		const isOptionSelected = document.querySelector('input[name="action"]:checked');
		submitButton.disabled = !isOptionSelected;
	};

	radioButtons.forEach((radio) => {
		radio.addEventListener('change', updateSubmitButtonState);
	});
};

// Initialize form validation when the DOM is ready
document.addEventListener('DOMContentLoaded', initializeFormValidation);
</script>
