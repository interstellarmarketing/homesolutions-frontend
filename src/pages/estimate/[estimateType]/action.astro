---
import { z } from "zod";
import { estimateStore } from "@stores/estimateProgress";
import {
	shortTradeEnum,
	tradeOptionDescriptions,
} from "@assets/info/estimateOptions";
import {
	activeEstimateTypeStore,
	computedEstimateOptions,
} from "@stores/activeEstimateType";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";

let { estimateType } = Astro.params;

const parseEstimateType = shortTradeEnum.safeParse(estimateType);

if (!estimateType || !parseEstimateType.success) {
	return Astro.redirect("/");
}

estimateType = parseEstimateType.data;

const existingStore = estimateStore.get();
const activeEstimateType = activeEstimateTypeStore.get();
const activeEstimateOptions = computedEstimateOptions.get();

if (!activeEstimateOptions) {
	console.log("failed @ activeEstimateOptions");
	return Astro.redirect("/");
}

console.log({ activeEstimateType });

let { estimateAction } = existingStore;

if (!existingStore?.zipCode?.length) {
	return Astro.redirect(`/estimate/${estimateType}/zip`);
}

const tradeOptions = tradeOptionDescriptions.find(
	(x) => x.shortTrade === activeEstimateType,
);

const actionParser = z.string();

const existingActionParsed = actionParser.safeParse(estimateAction);

if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();

	const getAction = formData.get("action");
	const actionParsed = actionParser.safeParse(getAction);

	if (actionParsed?.success) {
		estimateAction = actionParsed?.data;

		estimateStore.set({
			...existingStore,
			estimateAction: estimateAction,
		});

		return Astro.redirect(
			`/estimate/${estimateType}/projectDetails`,
		);
	}
}
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
	<div class="flex flex-col gap-4 text-center">
		<h2 class="text-2xl md:text-3xl font-bold text-gray-800">What would you like to do?</h2>
		<form class="flex flex-col items-center text-center gap-4 my-4" method="post">
			<div class="flex flex-col gap-4 w-full max-w-md">
				{activeEstimateOptions.data.estimateAction.map((action) => (
					<label class="flex items-center gap-4 p-4 border rounded-lg cursor-pointer hover:bg-gray-50">
						<input
							type="radio"
							name="action"
							value={action}
							checked={existingStore.estimateAction === action}
							class="form-radio text-orange-300 focus:ring-orange-300"
						/>
						<span class="text-gray-700">{action}</span>
					</label>
				))}
			</div>
			<button
				type="submit"
				id="actionSubmitButton"
				class="w-full max-w-md bg-orange-300 hover:bg-orange-400 text-gray-900 font-semibold rounded-lg py-3 px-6 transition-colors disabled:opacity-50"
				disabled={!existingActionParsed.success}
			>
				NEXT
			</button>
		</form>
	</div>
</EstimateWrapper>

<script>
	const radioButtons = document.querySelectorAll(
		'input[name="action"]',
	) as NodeListOf<HTMLInputElement>;
	const submitButton = document.getElementById(
		"actionSubmitButton",
	) as HTMLButtonElement | null;

	if (radioButtons && submitButton) {
		radioButtons.forEach((radioButton) => {
			radioButton.addEventListener("change", () => {
				const selectedValue = document.querySelector(
					'input[name="action"]:checked',
				) as HTMLInputElement | null;

				if (selectedValue) {
					submitButton.removeAttribute(
						"disabled",
					);
				} else {
					submitButton.setAttribute(
						"disabled",
						"",
					);
				}
			});
		});
	}
</script>
