---
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import {
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@consts/estimateSteps";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";
import { getNextStep } from "src/consts/estimateSteps";

/**
 * Interface representing the page state
 */
interface PageState {
  estimateType: string;
  firstName: string | undefined;
  lastName: string | undefined;
  stepNumber: number;
  totalSteps: number;
}

// Create contact-specific parser
const contactSchema = z.object({
  firstName: z.string().min(2),
  lastName: z.string().min(2),
});

/**
 * Initializes the page state based on URL parameters
 */
function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, {
      status: 302,
      headers: { Location: "/" },
    });
  }

  const estimateType = validatedEstimateType.data;

  // Get step information
  const stepNumber = getCurrentStepNumber(estimateType, "contact");
  const totalSteps = getStoreSteps(estimateType);

  return {
    estimateType,
    firstName: searchParams.get("firstName") || undefined,
    lastName: searchParams.get("lastName") || undefined,
    stepNumber,
    totalSteps,
  };
}

/**
 * Handles form submission
 */
async function handleFormSubmission(
  request: Request,
  estimateType: string
): Promise<Response | null> {
  const formData = await request.formData();
  const contactData = {
    firstName: formData.get("firstNameInput"),
    lastName: formData.get("lastNameInput"),
  };

  const contactParsed = contactSchema.safeParse(contactData);

  if (!contactParsed.success) {
    return null;
  }

  // Pass contact data as URL parameters
  const url = new URL(request.url);
  Object.entries(contactParsed.data).forEach(([key, value]) => {
    if (value !== undefined) {
      url.searchParams.set(key, value.toString());
    }
  });

  // The next step will be determined client-side
  const redirectUrl = `/estimate/${estimateType}/`;
  return new Response(null, {
    status: 302,
    headers: {
      Location: appendQueryParams(redirectUrl, url.searchParams),
    },
  });
}

// Process the page based on the request method
let pageState: PageState | Response;
if (Astro.request.method === "POST") {
  const response = await handleFormSubmission(
    Astro.request,
    Astro.params.estimateType || ""
  );
  if (response) return response;
}

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const getStepHeader = () => {
  switch (pageState.estimateType) {
    default:
      return "Please enter your full name";
  }
};
const stepHeader = getStepHeader();
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="contactForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      estimateType={pageState.estimateType}
      hasNextStep
      hasPrevStep={pageState.stepNumber > 1}
    >
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 w-full">
        <div class="flex flex-col gap-2">
          <label
            for="firstNameInput"
            class="text-[#111928] text-sm font-medium leading-[21px]"
          >
            First name
          </label>
          <div class="relative">
            <img
              src="/static/user.svg"
              alt="user icon"
              class="absolute left-4 top-1/2 -translate-y-1/2"
            />
            <input
              type="text"
              required
              id="firstNameInput"
              name="firstNameInput"
              placeholder="Enter first name"
              value={pageState.firstName || null}
              minlength="2"
              autocomplete="given-name"
              class="w-full h-[52px] pl-14 pr-4 py-3.5 bg-gray-50 rounded-lg border border-gray-300 text-gray-500 text-base font-normal leading-normal"
            />
          </div>
        </div>

        <div class="flex flex-col gap-2">
          <label
            for="lastNameInput"
            class="text-[#111928] text-sm font-medium leading-[21px]"
          >
            Last name
          </label>
          <div class="relative">
            <img
              src="/static/user.svg"
              alt="user icon"
              class="absolute left-4 top-1/2 -translate-y-1/2"
            />
            <input
              type="text"
              required
              id="lastNameInput"
              name="lastNameInput"
              placeholder="Enter last name"
              value={pageState.lastName || null}
              minlength="2"
              autocomplete="family-name"
              class="w-full h-[52px] pl-14 pr-4 py-3.5 bg-gray-50 rounded-lg border border-gray-300 text-gray-500 text-base font-normal leading-normal"
            />
          </div>
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { estimateStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { getNextStep } from "@consts/estimateSteps";
  import { shortTradeEnum } from "@assets/info/estimateOptions";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import { z } from "zod";

  class ContactFormController {
    private form: HTMLFormElement | null;
    private firstNameInput: HTMLInputElement | null;
    private lastNameInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private estimateType: string;

    // Contact schema for client-side validation
    private contactSchema = z.object({
      firstName: z.string().min(2),
      lastName: z.string().min(2),
    });

    constructor() {
      this.form = document.getElementById("contactForm") as HTMLFormElement;
      this.firstNameInput = document.getElementById(
        "firstNameInput"
      ) as HTMLInputElement;
      this.lastNameInput = document.getElementById(
        "lastNameInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private initialize() {
      if (
        !this.form ||
        !this.firstNameInput ||
        !this.lastNameInput ||
        !this.submitButton
      ) {
        console.error("Required elements not found");
        return;
      }

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "contact",
        estimateType: validatedEstimateType.data,
      });

      // Set up event listeners
      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
      this.firstNameInput.addEventListener("input", () => this.validateForm());
      this.lastNameInput.addEventListener("input", () => this.validateForm());

      // Initial validation
      this.validateForm();
    }

    private validateForm() {
      if (!this.firstNameInput || !this.lastNameInput || !this.submitButton)
        return;

      const isValid = this.contactSchema.safeParse({
        firstName: this.firstNameInput.value,
        lastName: this.lastNameInput.value,
      }).success;

      this.submitButton.setAttribute(
        "aria-disabled",
        isValid ? "false" : "true"
      );
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form || !this.firstNameInput || !this.lastNameInput) return;

      const contactData = {
        firstName: this.firstNameInput.value,
        lastName: this.lastNameInput.value,
      };

      const validationResult = this.contactSchema.safeParse(contactData);
      if (!validationResult.success) {
        return;
      }

      // Update store with contact data
      const existingStore = estimateStore.get();
      estimateStore.set({
        ...existingStore,
        ...contactData,
      });

      // Get next step and redirect
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(validatedEstimateType.data, "contact");

        if (nextStep) {
          const url = new URL(window.location.href);
          url.pathname = `/estimate/${this.estimateType}/${nextStep}`;

          // Add contact data as URL parameters
          Object.entries(contactData).forEach(([key, value]) => {
            url.searchParams.set(key, value);
          });

          window.location.href = url.toString();
          return;
        }
      }
    }
  }

  crossPlatformLoader(() => new ContactFormController());
</script>
