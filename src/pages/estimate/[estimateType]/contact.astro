---
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { estimateParser, estimateStore } from "@stores/estimateProgress";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";

/**
 * Validates and processes the contact form submission
 * @param formData - Form data from the request
 * @param existingStore - Current store data
 * @param estimateType - Current estimate type
 * @returns Response object for redirect or null if validation fails
 */
async function processContactForm(
  formData: FormData,
  existingStore: Record<string, any>,
  estimateType: string
): Promise<Response | null> {
  const contactData = {
    firstName: formData.get("firstNameInput"),
    lastName: formData.get("lastNameInput"),
  };

  const contactParsed = contactParser.safeParse(contactData);

  if (!contactParsed.success) {
    return null;
  }

  // Update store with new contact information
  estimateStore.set({
    ...existingStore,
    ...contactParsed.data,
  });

  if (estimateType === "roofing") {
    return new Response(null, {
      status: 302,
      headers: { Location: `/estimate/${estimateType}/email` },
    });
  }

  return new Response(null, {
    status: 302,
    headers: { Location: `/estimate/${estimateType}/address` },
  });
}

// Route parameter validation
const { estimateType } = Astro.params;
if (!estimateType) {
  return Astro.redirect("/");
}

// Initialize store and form state
const existingStore = estimateStore.get();
const { firstName, lastName } = existingStore;

// Create contact-specific parser from estimate schema
const contactParser = estimateParser.pick({
  firstName: true,
  lastName: true,
});

// Validate existing contact data
const existingContactParsed = contactParser.safeParse({ firstName, lastName });

// Handle form submission
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const response = await processContactForm(
    formData,
    existingStore,
    estimateType
  );
  if (response) return response;
}

const getStepNumber = () => {
  switch (estimateType) {
    case "roofing":
      return 5;
    default:
      return 4;
  }
};

const getStepHeader = () => {
  switch (estimateType) {
    default:
      return "Please enter your full name";
  }
};
const stepNumber = getStepNumber();
const totalSteps = getTotalSteps(estimateType);
const stepHeader = getStepHeader();
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
  <form method="post">
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      estimateType={estimateType}
      hasNextStep
      hasPrevStep={stepNumber > 1}
    >
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 w-full">
        <div class="flex flex-col gap-2">
          <label
            for="firstNameInput"
            class="text-[#111928] text-sm font-medium leading-[21px]"
          >
            First name
          </label>
          <div class="relative">
            <img
              src="/static/user.svg"
              alt="user icon"
              class="absolute left-4 top-1/2 -translate-y-1/2"
            />
            <input
              type="text"
              required
              id="firstNameInput"
              name="firstNameInput"
              placeholder="Enter first name"
              value={firstName?.length ? firstName : null}
              minlength="2"
              autocomplete="given-name"
              class="w-full h-[52px] pl-14 pr-4 py-3.5 bg-gray-50 rounded-lg border border-gray-300 text-gray-500 text-base font-normal leading-normal"
            />
          </div>
        </div>

        <div class="flex flex-col gap-2">
          <label
            for="lastNameInput"
            class="text-[#111928] text-sm font-medium leading-[21px]"
          >
            Last name
          </label>
          <div class="relative">
            <img
              src="/static/user.svg"
              alt="user icon"
              class="absolute left-4 top-1/2 -translate-y-1/2"
            />
            <input
              type="text"
              required
              id="lastNameInput"
              name="lastNameInput"
              placeholder="Enter last name"
              value={lastName?.length ? lastName : null}
              minlength="2"
              autocomplete="family-name"
              class="w-full h-[52px] pl-14 pr-4 py-3.5 bg-gray-50 rounded-lg border border-gray-300 text-gray-500 text-base font-normal leading-normal"
            />
          </div>
        </div>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { z } from "zod";

  /**
   * Manages form validation and button state
   */
  class ContactFormController {
    private firstNameInput: HTMLInputElement | null;
    private lastNameInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private readonly validator = z.string().min(2);

    constructor() {
      this.firstNameInput = document.getElementById(
        "firstNameInput"
      ) as HTMLInputElement;
      this.lastNameInput = document.getElementById(
        "lastNameInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.initialize();
    }

    /**
     * Sets up event listeners for form inputs
     */
    private initialize(): void {
      if (!this.firstNameInput || !this.lastNameInput || !this.submitButton) {
        console.error("Required form elements not found");
        return;
      }

      // Check initial state using input values directly
      const isFirstNameValid = this.validator.safeParse(
        this.firstNameInput.value
      ).success;
      const isLastNameValid = this.validator.safeParse(
        this.lastNameInput.value
      ).success;

      if (isFirstNameValid && isLastNameValid) {
        this.submitButton.disabled = false;
      }

      [this.firstNameInput, this.lastNameInput].forEach((input) => {
        input.addEventListener("input", () => this.validateForm());
      });
    }

    /**
     * Validates the form and updates submit button state
     */
    private validateForm(): void {
      if (!this.firstNameInput || !this.lastNameInput || !this.submitButton)
        return;

      const isFirstNameValid = this.validator.safeParse(
        this.firstNameInput.value
      ).success;
      const isLastNameValid = this.validator.safeParse(
        this.lastNameInput.value
      ).success;

      this.submitButton.disabled = !(isFirstNameValid && isLastNameValid);
    }
  }

  // Initialize form controller
  new ContactFormController();
</script>
