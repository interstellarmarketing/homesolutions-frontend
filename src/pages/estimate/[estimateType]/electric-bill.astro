---
import { shortTradeEnum } from "@assets/info/estimateOptions";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import StepLayout from "@components/step-layout/index.astro";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { appendQueryParams } from "@utils/queryParams";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";

// Define validation schemas using Zod
const estimateTypeSchema = shortTradeEnum;

const electricBillOptions = [
  "Electric Bill Above $100",
  "Electric Bill Below $100",
];

interface PageState {
  estimateType: string;
  electricBillOver100: boolean | undefined;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  // Get step information
  const estimateType = parsedEstimateType.data;
  const stepNumber = getCurrentStepNumber(estimateType, "electric-bill");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType,
    electricBillOver100: searchParams.get("ebh") === "1",
    stepNumber,
    totalSteps,
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const electricBill = formData.get("electricBill");

  // Convert the string value to boolean
  const electricBillOver100 = electricBill === "Electric Bill Above $100";

  // Pass electric bill as URL parameter
  const url = new URL(request.url);
  url.searchParams.set("ebh", electricBillOver100 ? "1" : "0");

  // The next step will be determined client-side
  const redirectUrl = `/estimate/${estimateType}/`;
  return new Response(null, {
    status: 302,
    headers: {
      Location: appendQueryParams(redirectUrl, url.searchParams),
    },
  });
}

const pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

if (Astro.request.method === "POST") {
  const response = await handleFormSubmission(
    Astro.request,
    pageState.estimateType
  );
  if (response) return response;
}

const stepHeader = "Is Your Electric Bill Usually Higher Than $100?";

// Transform boolean value to string for the radio component
const currentSelection =
  pageState.electricBillOver100 === undefined
    ? undefined
    : pageState.electricBillOver100
      ? "Electric Bill Above $100"
      : "Electric Bill Below $100";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="electricBillForm"
    data-estimate-type={pageState.estimateType}
  >
    <input
      type="hidden"
      id="hasInitialSelection"
      value={pageState.electricBillOver100 !== undefined ? "true" : "false"}
    />

    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber < pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={electricBillOptions}
        name="electricBill"
        currentSelection={currentSelection}
        layout="grid2"
      />
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { shortTradeEnum } from "@assets/info/estimateOptions";
  import {
    getCurrentStepNumber,
    getNextStep,
    getTotalSteps,
  } from "@consts/estimateSteps";
  import { estimateStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  class FormController {
    private radioButtons: NodeListOf<HTMLInputElement>;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private estimateType: string;
    private stepNumber: number = 0;
    private totalSteps: number = 0;

    constructor() {
      this.radioButtons = document.querySelectorAll(
        'input[name="electricBill"]'
      );
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById(
        "electricBillForm"
      ) as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private initialize() {
      if (
        !this.submitButton ||
        !this.radioButtons.length ||
        !this.form ||
        !this.estimateType
      )
        return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "electric-bill",
        estimateType: validatedEstimateType.data,
      });

      // Update step number and total steps
      this.calculateStepNumbers();

      const hasInitialSelection = document.getElementById(
        "hasInitialSelection"
      ) as HTMLInputElement;
      if (hasInitialSelection?.value === "true") {
        this.submitButton.setAttribute("aria-disabled", "false");
      }

      this.radioButtons.forEach((radio) => {
        radio.addEventListener("change", () => this.handleRadioChange());
      });

      this.form.addEventListener("submit", (e) => this.handleSubmit(e));

      // Update any UI elements that need the step numbers
      this.updateStepUI();
    }

    private calculateStepNumbers() {
      if (!this.estimateType) return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) return;

      // Get step numbers using the utility functions
      const estimateType = validatedEstimateType.data;
      this.stepNumber = getCurrentStepNumber(estimateType, "electric-bill");
      this.totalSteps = getTotalSteps(estimateType);
    }

    private updateStepUI() {
      // Find and update step number elements if they exist
      const stepNumberElement = document.querySelector("[data-step-number]");
      const totalStepsElement = document.querySelector("[data-total-steps]");

      if (stepNumberElement) {
        stepNumberElement.textContent = this.stepNumber.toString();
      }

      if (totalStepsElement) {
        totalStepsElement.textContent = this.totalSteps.toString();
      }
    }

    private handleRadioChange() {
      if (!this.submitButton) return;

      const isSelected = Array.from(this.radioButtons).some(
        (radio) => radio.checked
      );
      this.submitButton.setAttribute(
        "aria-disabled",
        !isSelected ? "true" : "false"
      );
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form) return;

      const electricBill = Array.from(this.radioButtons).find(
        (radio) => radio.checked
      )?.value;

      if (!electricBill) return;

      // Convert the string value to boolean
      const electricBillOver100 = electricBill === "Electric Bill Above $100";

      // Update store
      const existingStore = estimateStore.get();
      estimateStore.set({
        ...existingStore,
        electricBillOver100,
      });

      // Get next step
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(
          validatedEstimateType.data,
          "electric-bill"
        );
        if (nextStep) {
          const url = new URL(window.location.href);
          url.pathname = `/estimate/${this.estimateType}/${nextStep}`;

          // Add electric bill as URL parameter
          url.searchParams.set("ebh", electricBillOver100 ? "1" : "0");

          window.location.href = url.toString();
          return;
        }
      }

      // Fallback to contact
      const url = new URL(window.location.href);
      url.pathname = `/estimate/${this.estimateType}/contact`;

      // Add electric bill as URL parameter
      url.searchParams.set("ebh", electricBillOver100 ? "1" : "0");

      window.location.href = url.toString();
    }
  }

  crossPlatformLoader(() => new FormController());
</script>
