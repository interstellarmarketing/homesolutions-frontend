---
import { shortTradeEnum } from "@models/estimateOptions";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import StepLayout from "@components/step-layout/index.astro";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { appendQueryParams } from "@utils/queryParams";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";

// Define validation schemas using Zod
const estimateTypeSchema = shortTradeEnum;

const electricBillOptions = ["$50-$99", "$100-$200", "$201-$300", "$301-$400+"];

interface PageState {
  estimateType: string;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  // Get step information
  const estimateType = parsedEstimateType.data;
  const stepNumber = getCurrentStepNumber(estimateType, "electric-bill");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType,
    stepNumber,
    totalSteps,
  };
}

const pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const stepHeader = "What Is Your Average Electric Bill?";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="electricBillForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber <= pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={electricBillOptions}
        name="electricBill"
        currentSelection={undefined}
        layout="grid2"
      />
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { shortTradeEnum } from "@models/estimateOptions";
  import {
    getCurrentStepNumber,
    getNextStep,
    getTotalSteps,
  } from "@consts/estimateSteps";
  import { estimateProgressStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import { appendQueryParams } from "@utils/queryParams";
  import { navigate } from "astro:transitions/client";

  class FormController {
    private radioButtons: NodeListOf<HTMLInputElement>;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private estimateType: string;
    private stepNumber: number = 0;
    private totalSteps: number = 0;

    constructor() {
      this.radioButtons = document.querySelectorAll(
        'input[name="electricBill"]'
      );
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById(
        "electricBillForm"
      ) as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    private initialize() {
      if (
        !this.submitButton ||
        !this.radioButtons.length ||
        !this.form ||
        !this.estimateType
      )
        return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "electric-bill",
        estimateType: validatedEstimateType.data,
      });

      // Update step number and total steps
      this.calculateStepNumbers();

      // Check store for initial selection and set the radio button accordingly
      const storeData = estimateProgressStore.get();
      if (
        storeData.utility_bill !== undefined &&
        storeData.utility_bill !== null
      ) {
        const radioToCheck = Array.from(this.radioButtons).find(
          (radio) => radio.value === storeData.utility_bill
        );

        if (radioToCheck) {
          radioToCheck.checked = true;
          this.submitButton.setAttribute("aria-disabled", "false");
        } else {
          this.submitButton.setAttribute("aria-disabled", "true");
        }
      } else {
        this.submitButton.setAttribute("aria-disabled", "true");
      }

      this.radioButtons.forEach((radio) => {
        radio.addEventListener("change", () => this.handleRadioChange());
      });

      this.form.addEventListener("submit", (e) => this.handleSubmit(e));

      // Update any UI elements that need the step numbers
      this.updateStepUI();
    }

    private calculateStepNumbers() {
      if (!this.estimateType) return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) return;

      // Get step numbers using the utility functions
      const estimateType = validatedEstimateType.data;
      this.stepNumber = getCurrentStepNumber(estimateType, "electric-bill");
      this.totalSteps = getTotalSteps(estimateType);
    }

    private updateStepUI() {
      // Find and update step number elements if they exist
      const stepNumberElement = document.querySelector("[data-step-number]");
      const totalStepsElement = document.querySelector("[data-total-steps]");

      if (stepNumberElement) {
        stepNumberElement.textContent = this.stepNumber.toString();
      }

      if (totalStepsElement) {
        totalStepsElement.textContent = this.totalSteps.toString();
      }
    }

    private handleRadioChange() {
      if (!this.submitButton) return;

      const isSelected = Array.from(this.radioButtons).some(
        (radio) => radio.checked
      );
      this.submitButton.setAttribute(
        "aria-disabled",
        !isSelected ? "true" : "false"
      );
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form) return;

      const electricBill = Array.from(this.radioButtons).find(
        (radio) => radio.checked
      )?.value;

      if (!electricBill) return;

      // Update store
      const existingStore = estimateProgressStore.get();
      estimateProgressStore.set({
        ...existingStore,
        utility_bill: electricBill,
      });

      // Get next step
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(
          validatedEstimateType.data,
          "electric-bill"
        );
        if (nextStep) {
          const currentUrl = new URL(window.location.href);
          navigate(
            appendQueryParams(
              `/estimate/${this.estimateType}/${nextStep}`,
              new URLSearchParams(currentUrl.search)
            )
          );
          return;
        }
      }
    }
  }

  crossPlatformLoader(() => new FormController());
</script>
