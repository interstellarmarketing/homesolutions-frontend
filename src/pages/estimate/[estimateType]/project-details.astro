---
/**
 * Project Details Page
 * Collects information about the specific project details
 * for the customer's estimate
 */

import {
  shortTradeEnum,
  tradeOptionDescriptions,
} from "@models/estimateOptions";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import StepLayout from "@components/step-layout/index.astro";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import {
  activeEstimateTypeStore,
  computedEstimateOptions,
} from "@stores/activeEstimateType";

// Schema definitions
const estimateTypeSchema = shortTradeEnum;

/**
 * Represents the state of the page
 * @interface PageState
 */
interface PageState {
  estimateType: string;
  tradeDescription: string | undefined;
  projectTypes: string[];
  stepNumber: number;
  totalSteps: number;
}

/**
 * Initializes the page state based on URL parameters
 * @param {Record<string, string | undefined>} params - URL parameters
 * @returns {PageState | Response} Either the page state or a redirect response
 */
function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  // Validate the estimate type from URL parameters
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  const estimateType = parsedEstimateType.data;
  const activeEstimateOptions = computedEstimateOptions.get();

  // Find the trade options for the current estimate type
  const tradeOptions = tradeOptionDescriptions.find(
    (option) => option.shortTrade === activeEstimateTypeStore.get()
  );

  // Get step information
  const stepNumber = getCurrentStepNumber(estimateType, "project-details");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType,
    tradeDescription: tradeOptions?.typeDescription,
    projectTypes:
      activeEstimateOptions?.data.type.filter((type) => type !== null) || [],
    stepNumber,
    totalSteps,
  };
}

// Process the page based on the request method
let pageState: PageState | Response;

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const getStepHeader = () => {
  switch (pageState.estimateType) {
    case "roofing":
      return pageState.tradeDescription ?? "";
    case "siding":
      return pageState.tradeDescription ?? "";
    default:
      return "What type of project are you looking to complete?";
  }
};

const stepHeader = getStepHeader();
---

<!-- Template section -->
<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="projectDetailsForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber <= pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={pageState.projectTypes}
        name="estimate_option"
        currentSelection={undefined}
        layout="flex"
        capitalize={true}
      />
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import {
    shortTradeEnum,
    type EstimateOptionsRoofingSchema,
    type EstimateOptionsSidingSchema,
    type EstimateOptionsSolarSchema,
  } from "@models/estimateOptions";
  import { estimateProgressStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import { appendQueryParams } from "@utils/queryParams";
  import { navigate } from "astro:transitions/client";
  import { getNextStep } from "src/consts/estimateSteps";

  /**
   * Controls the form behavior and button states
   */
  class FormController {
    private radioButtons: NodeListOf<HTMLInputElement>;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private estimateType: string;

    constructor() {
      this.radioButtons = document.querySelectorAll(
        'input[name="estimate_option"]'
      );
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById(
        "projectDetailsForm"
      ) as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    /**
     * Sets up event listeners for radio buttons and checks initial state
     */
    private initialize() {
      if (
        !this.submitButton ||
        !this.radioButtons.length ||
        !this.form ||
        !this.estimateType
      )
        return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "project-details",
        estimateType: validatedEstimateType.data,
      });

      // Check store for initial selection and set the radio button accordingly
      const storeData = estimateProgressStore.get();
      const estimateOptions = storeData.estimate_options as
        | EstimateOptionsRoofingSchema
        | EstimateOptionsSolarSchema
        | EstimateOptionsSidingSchema;

      let key: string | undefined;

      switch (this.estimateType) {
        case "roofing":
          key = "roof_type";
          break;
        case "siding":
          key = "siding_type";
          break;
      }

      if (key && estimateOptions?.[key as keyof typeof estimateOptions]) {
        // Find and check the matching radio button
        const radioToCheck = Array.from(this.radioButtons).find(
          (radio) =>
            radio.value ===
            estimateOptions?.[key as keyof typeof estimateOptions]
        );

        if (radioToCheck) {
          radioToCheck.checked = true;
          this.submitButton.setAttribute("aria-disabled", "false");
        } else {
          this.submitButton.setAttribute("aria-disabled", "true");
        }
      } else {
        this.submitButton.setAttribute("aria-disabled", "true");
      }

      this.radioButtons.forEach((radio) => {
        radio.addEventListener("change", () => this.handleRadioChange());
      });

      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }

    private handleRadioChange() {
      if (!this.submitButton) return;

      const isSelected = Array.from(this.radioButtons).some(
        (radio) => radio.checked
      );
      this.submitButton.setAttribute(
        "aria-disabled",
        !isSelected ? "true" : "false"
      );
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form) return;

      const selectedEstimateOption = Array.from(this.radioButtons).find(
        (radio) => radio.checked
      )?.value;

      if (!selectedEstimateOption) return;

      // Update store
      const existingStore = estimateProgressStore.get();
      const estimateOptions = existingStore.estimate_options as
        | EstimateOptionsRoofingSchema
        | EstimateOptionsSolarSchema
        | EstimateOptionsSidingSchema;

      let key: string | undefined;

      switch (this.estimateType) {
        case "roofing":
          key = "roof_type";
          break;
        case "siding":
          key = "siding_type";
          break;
      }

      if (!!key) {
        estimateProgressStore.set({
          ...existingStore,
          estimate_options: {
            ...estimateOptions,
            [key]: selectedEstimateOption,
          },
        });
      }

      // Get next step
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(
          validatedEstimateType.data,
          "project-details"
        );
        if (nextStep) {
          const currentUrl = new URL(window.location.href);
          navigate(
            appendQueryParams(
              `/estimate/${this.estimateType}/${nextStep}`,
              new URLSearchParams(currentUrl.search)
            )
          );
          return;
        }
      }
    }
  }

  crossPlatformLoader(() => new FormController());
</script>
