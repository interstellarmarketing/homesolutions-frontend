---
/**
 * Project Details Page
 * Collects information about the specific project details
 * for the customer's estimate
 */

import { z } from "zod";
import { estimateStore } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import {
  activeEstimateTypeStore,
  computedEstimateOptions,
} from "@stores/activeEstimateType";
import {
  shortTradeEnum,
  tradeOptionDescriptions,
} from "@assets/info/estimateOptions";
import {
  estimateStepsStore,
  getNextStep,
  getPreviousStep,
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@stores/estimateStepsStore";
import StepLayout from "@components/step-layout/index.astro";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import { appendQueryParams } from "@utils/queryParams";

// Schema definitions
const actionSchema = z.string();
const estimateTypeSchema = shortTradeEnum;

/**
 * Represents the state of the page
 * @interface PageState
 */
interface PageState {
  estimateType: string;
  tradeDescription: string | undefined;
  projectTypes: (string | null)[] | undefined;
  currentSelection: string | undefined;
}

/**
 * Initializes the page state based on URL parameters
 * @param {Record<string, string | undefined>} params - URL parameters
 * @returns {PageState | Response} Either the page state or a redirect response
 */
function initializePage(
  params: Record<string, string | undefined>
): PageState | Response {
  // Validate the estimate type from URL parameters
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  const estimateType = parsedEstimateType.data;
  const activeEstimateOptions = computedEstimateOptions.get();

  // Update the estimate steps store with current page
  estimateStepsStore.set({
    currentStep: "project-details",
    estimateType: estimateType,
  });

  // Ensure estimate options are available
  if (!activeEstimateOptions) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  // Find the trade options for the current estimate type
  const tradeOptions = tradeOptionDescriptions.find(
    (option) => option.shortTrade === activeEstimateTypeStore.get()
  );

  return {
    estimateType,
    tradeDescription: tradeOptions?.typeDescription,
    projectTypes: activeEstimateOptions.data.type,
    currentSelection: estimateStore.get().estimateAction,
  };
}

/**
 * Handles form submission and updates the estimate store
 * @param {Request} request - The incoming request object
 * @param {string} estimateType - The current estimate type
 * @returns {Promise<Response | null>} Redirect response or null if validation fails
 */
async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const actionParsed = actionSchema.safeParse(formData.get("action"));

  if (!actionParsed.success) {
    return null;
  }

  const existingStore = estimateStore.get();
  estimateStore.set({
    ...existingStore,
    projectDetails: actionParsed.data,
  });

  // Get the next step from the store
  const validatedEstimateType = estimateTypeSchema.safeParse(estimateType);
  if (validatedEstimateType.success) {
    const nextStep = getNextStep(validatedEstimateType.data, "project-details");

    if (nextStep) {
      return new Response(null, {
        status: 302,
        headers: {
          Location: appendQueryParams(
            `/estimate/${estimateType}/${nextStep}`,
            Astro.url.searchParams
          ),
        },
      });
    }
  }

  // Fallback to original logic if next step not found
  return new Response(null, {
    status: 302,
    headers: { Location: `/estimate/${estimateType}/address` },
  });
}

// Process the page based on the request method
let pageState: PageState | Response;
if (Astro.request.method === "POST") {
  const result = await handleFormSubmission(
    Astro.request,
    Astro.params.estimateType || ""
  );
  if (result) {
    return result;
  }
}

pageState = initializePage(Astro.params);

if (pageState instanceof Response) {
  return pageState;
}

// Handle null project types by redirecting to contact page
if (pageState.projectTypes?.includes(null)) {
  const existingStore = estimateStore.get();
  estimateStore.set({
    ...existingStore,
    estimateType: null,
  });

  return Astro.redirect(`/estimate/${pageState.estimateType}/contact`);
}

// Get previous page URL for back button
const validatedEstimateType = estimateTypeSchema.safeParse(
  pageState.estimateType
);
const prevStep = validatedEstimateType.success
  ? getPreviousStep(validatedEstimateType.data, "project-details")
  : null;
const prevUrl = prevStep
  ? `/estimate/${pageState.estimateType}/${prevStep}`
  : `/estimate/${pageState.estimateType}/zip`;

// Get step number and total from store
const stepNumber = validatedEstimateType.success
  ? getCurrentStepNumber(validatedEstimateType.data, "project-details")
  : 1;
const totalSteps = validatedEstimateType.success
  ? getStoreSteps(validatedEstimateType.data)
  : 5;

const getStepHeader = () => {
  switch (pageState.estimateType) {
    case "roofing":
      return pageState.tradeDescription ?? "";
    default:
      return "What type of project are you looking to complete?";
  }
};

const stepHeader = getStepHeader();

const existingStore = estimateStore.get();

if (existingStore.projectDetails) {
  pageState.currentSelection = existingStore.projectDetails;
}

// Filter out null values from projectTypes
const validProjectTypes =
  pageState.projectTypes?.filter((type): type is string => type !== null) ?? [];
---

<!-- Template section -->
<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form method="post">
    <input
      type="hidden"
      id="hasInitialSelection"
      value={existingStore.projectDetails ? "true" : "false"}
    />
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      hasNextStep
      hasPrevStep={stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={validProjectTypes}
        name="action"
        currentSelection={pageState.currentSelection}
        layout="grid4"
        capitalize={true}
      />
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  /**
   * Controls the form behavior and button states
   */
  class FormController {
    private radioButtons: NodeListOf<HTMLInputElement>;
    private submitButton: HTMLButtonElement | null;

    constructor() {
      this.radioButtons = document.querySelectorAll('input[name="action"]');
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.initialize();
    }

    /**
     * Sets up event listeners for radio buttons and checks initial state
     */
    private initialize() {
      console.log("Initializing form controller");
      if (!this.submitButton || !this.radioButtons.length) return;

      // Check hidden field for initial state
      const hasInitialSelection =
        document
          .getElementById("hasInitialSelection")
          ?.getAttribute("value") === "true";
      if (hasInitialSelection) {
        this.submitButton.disabled = false;
      }

      this.radioButtons.forEach((radio) => {
        radio.addEventListener("change", () => this.handleRadioChange());
      });
    }

    private handleRadioChange() {
      console.log("Radio change detected");
      if (!this.submitButton) return;

      const isSelected = Array.from(this.radioButtons).some(
        (radio) => radio.checked
      );
      this.submitButton.disabled = !isSelected;
    }
  }

  crossPlatformLoader(() => new FormController());
</script>
