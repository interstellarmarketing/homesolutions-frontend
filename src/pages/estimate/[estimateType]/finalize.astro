---
import { estimateStore, estimateParser } from "@stores/estimateProgress";
import { resultIdStore } from "@stores/stashedResultId";
import { storeSuccessResult } from "@utils/kv/storedResults";
import { resetEstimateFields } from "@utils/stores/resetFields";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeDiscriminatedUnion } from "@assets/info/estimateOptions";

const { estimateType } = Astro.params;

if (!estimateType) {
	return Astro.redirect("/");
}

let existingStore = estimateStore.get();

let { phone, email } = existingStore;

const phoneEmailParser = estimateParser.pick({
	phone: true,
	email: true,
});

const existingPhoneEmailParser = phoneEmailParser.safeParse({
	phone,
	email,
});

if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();

	const phone = formData.get("phoneInput");
	const email = formData.get("emailInput");

	const phoneEmailParsed = phoneEmailParser.safeParse({ phone, email });

	if (phoneEmailParsed.success) {
		console.log({ preFinalStore: existingStore });

		existingStore = {
			...existingStore,
			...phoneEmailParsed.data,
		};

		console.log({ finalfinalstore: existingStore });

		estimateStore.set({
			...existingStore,
			...phoneEmailParsed.data,
		});

		const parseFinalizedStore =
			estimateParser.safeParse(existingStore);

		const testDiscriminatorParse =
			shortTradeDiscriminatedUnion.safeParse({
				shortTrade: existingStore.estimateShortTrade,
				data: {
					type: existingStore.estimateType,
					estimateAction:
						existingStore.estimateAction,
				},
			});

		console.log({ x: JSON.stringify(testDiscriminatorParse) });

		if (parseFinalizedStore.success) {
			const { resultId } = await storeSuccessResult(
				Astro,
				parseFinalizedStore.data,
			);
			resultIdStore.set({ ...resultId });

			const zDb = Astro.locals.runtime.env.DB;

			const db = await zDb.D1Methods();

			const submitToDb = await db.insertSubmission(
				{
					...parseFinalizedStore.data,
				},
				"home_improvement",
			);

			console.log({ submitToDb });

			resetEstimateFields();

			return Astro.redirect("/success");
		}

		console.log(JSON.stringify(parseFinalizedStore));
	} else {
		console.log(JSON.stringify(phoneEmailParsed));
	}
}
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
	<div class="flex flex-col gap-4 text-center">
		<h2 class="text-2xl md:text-3xl font-bold text-gray-800">Almost done! Just a few more details...</h2>
		<form class="flex flex-col items-center text-center gap-4 my-4" method="post">
			<div class="flex flex-col gap-4 w-full max-w-md">
				<input
					type="text"
					required
					class="form-input w-full text-center text-lg rounded-lg border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
					placeholder="First Name"
					id="firstNameInput"
					name="firstNameInput"
					value={firstName?.length ? firstName : null}
					minlength="2"
				/>
				<input
					type="text"
					required
					class="form-input w-full text-center text-lg rounded-lg border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
					placeholder="Last Name"
					id="lastNameInput"
					name="lastNameInput"
					value={lastName?.length ? lastName : null}
					minlength="2"
				/>
				<input
					type="email"
					required
					class="form-input w-full text-center text-lg rounded-lg border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
					placeholder="Email"
					id="emailInput"
					name="emailInput"
					value={email?.length ? email : null}
				/>
				<input
					type="tel"
					required
					class="form-input w-full text-center text-lg rounded-lg border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
					placeholder="Phone"
					id="phoneInput"
					name="phoneInput"
					value={phone?.length ? phone : null}
					pattern="[0-9]{3}[0-9]{3}[0-9]{4}"
					title="Please enter a valid 10-digit phone number"
				/>
			</div>
			<button
				type="submit"
				id="finalizeSubmitButton"
				class="w-full max-w-md bg-orange-300 hover:bg-orange-400 text-gray-900 font-semibold rounded-lg py-3 px-6 transition-colors disabled:opacity-50"
				disabled={!existingPhoneEmailParser.success}
			>
				GET MY ESTIMATE
			</button>
		</form>
	</div>
</EstimateWrapper>

<script>
	import { estimateParser } from "@stores/estimateProgress";

	const emailInputEl = document.getElementById(
		"emailInput",
	) as HTMLInputElement | null;

	const phoneInputEl = document.getElementById(
		"phoneInput",
	) as HTMLInputElement | null;

	const finalizeSubmitButton = document.getElementById(
		"finalizeSubmitButton",
	) as HTMLButtonElement | null;

	function formatPhoneNumber(value: string): string {
		const phoneNumber = value.replace(/\D/g, "");
		const phoneNumberLength = phoneNumber.length;

		if (phoneNumberLength < 4) return phoneNumber;
		if (phoneNumberLength < 7) {
			return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
		}
		return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;
	}

	const emailParser = estimateParser.pick({
		email: true,
	});

	const phoneParser = estimateParser.pick({
		phone: true,
	});

	if (emailInputEl && phoneInputEl && finalizeSubmitButton) {
		let resultHolder = {
			phone: false,
			email: false,
		};

		const updateButtonState = () => {
			console.log({ resultHolder });
			if (resultHolder.phone && resultHolder.email) {
				finalizeSubmitButton.removeAttribute(
					"disabled",
				);
			} else {
				finalizeSubmitButton.setAttribute(
					"disabled",
					"",
				);
			}
		};

		phoneInputEl.addEventListener("input", (e: Event) => {
			const input = e.target as HTMLInputElement;
			const formattedNumber = formatPhoneNumber(input.value);
			input.value = formattedNumber;
			const tryParse = phoneParser.safeParse({
				phone: input.value,
			});

			resultHolder.phone = tryParse.success;
			updateButtonState();
		});

		emailInputEl.addEventListener("input", (event) => {
			const target = event.target as HTMLInputElement;
			const targetParse = emailParser.safeParse({
				email: target.value,
			});
			resultHolder.email = targetParse.success;
			updateButtonState();
		});
	}
</script>
