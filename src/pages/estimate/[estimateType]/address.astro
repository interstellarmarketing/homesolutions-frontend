---
import { estimateStore, estimateParser } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { getTotalSteps } from "@utils/layout";
import StepLayout from "@components/step-layout/index.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import {
  estimateStepsStore,
  getNextStep,
  getPreviousStep,
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@stores/estimateStepsStore";
import { appendQueryParams } from "@utils/queryParams";

/**
 * Processes the address form submission
 * Validates and updates store with address data
 */
async function processAddressForm(
  formData: FormData,
  existingStore: Record<string, any>,
  estimateType: string,
  searchParams: URLSearchParams
): Promise<Response | null> {
  const addressData = {
    streetAddress: formData.get("streetAddressInput"),
    zipCode: formData.get("zipCodeInput"),
    city: formData.get("cityInput"),
    state: formData.get("stateInput"),
    isHomeowner: formData.get("isHomeownerInput") === "on",
  };

  const addressParser = estimateParser.pick({
    streetAddress: true,
    zipCode: true,
    city: true,
    state: true,
    isHomeowner: true,
  });

  const addressParsed = addressParser.safeParse(addressData);

  if (!addressParsed.success) {
    console.error("Address validation failed:", addressParsed.error);
    return null;
  }

  // Update store with new address data
  estimateStore.set({
    ...existingStore,
    ...addressParsed.data,
  });

  // Get the next step from the store
  const validatedEstimateType = shortTradeEnum.safeParse(estimateType);
  if (validatedEstimateType.success) {
    const nextStep = getNextStep(validatedEstimateType.data, "address");

    if (nextStep) {
      const redirectUrl = `/estimate/${estimateType}/${nextStep}`;
      return new Response(null, {
        status: 302,
        headers: { Location: appendQueryParams(redirectUrl, searchParams) },
      });
    }
  }

  // Fallback to original logic
  const redirectUrl = `/estimate/${estimateType}/thank-you`;
  return new Response(null, {
    status: 302,
    headers: { Location: appendQueryParams(redirectUrl, searchParams) },
  });
}

// Validate route parameters and prerequisites
const { estimateType } = Astro.params;
if (!estimateType) {
  return Astro.redirect("/");
}

const validatedEstimateType = shortTradeEnum.safeParse(estimateType);
if (validatedEstimateType.success) {
  // Update the estimate steps store with current page
  estimateStepsStore.set({
    currentStep: "address",
    estimateType: validatedEstimateType.data,
  });
}

const existingStore = estimateStore.get();
if (!existingStore.zipCode) {
  const redirectUrl = `/estimate/${estimateType}/zip`;
  return Astro.redirect(appendQueryParams(redirectUrl, Astro.url.searchParams));
}

// Extract existing data
const { streetAddress, isHomeowner } = existingStore;

// Handle form submission
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const response = await processAddressForm(
    formData,
    existingStore,
    estimateType,
    Astro.url.searchParams
  );
  if (response) return response;
}

// Add this near the top of your frontmatter
const GOOGLE_MAPS_API_KEY = import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY;

// Get previous page URL for back button
const prevStep = validatedEstimateType.success
  ? getPreviousStep(validatedEstimateType.data, "address")
  : null;
const prevUrl = prevStep
  ? `/estimate/${estimateType}/${prevStep}`
  : `/estimate/${estimateType}/project-details`;

// Get step number and total from store
const stepNumber = validatedEstimateType.success
  ? getCurrentStepNumber(validatedEstimateType.data, "address")
  : 1;
const totalSteps = validatedEstimateType.success
  ? getStoreSteps(validatedEstimateType.data)
  : 5;

const getStepHeader = () => {
  switch (estimateType) {
    default:
      return "What is your street address?";
  }
};
const stepHeader = getStepHeader();
---

<EstimateWrapper title={estimateType} estimateType={estimateType}>
  <form method="post">
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      estimateType={estimateType}
      hasNextStep
      hasPrevStep={stepNumber > 1}
      showLoadingOnSubmit={estimateType === "roofing"}
      loadingButtonText="Processing...."
    >
      <div
        class="flex flex-col gap-4 text-center rounded-lg container w-full max-w-md mx-auto"
      >
        <div class="flex flex-col gap-2">
          <label
            for="streetAddressInput"
            class="self-stretch text-[#111928] text-sm font-medium font-['Inter'] leading-[21px] text-left"
          >
            Street Address
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <img src="/static/pin.png" alt="map pin" class="w-5 h-5" />
            </div>
            <input
              type="text"
              required
              class="w-full bg-gray-50 rounded-lg border border-gray-300 py-3.5 pl-10 pr-4 text-base font-normal font-['Inter'] leading-normal text-gray-500"
              placeholder="Enter"
              id="streetAddressInput"
              name="streetAddressInput"
              minlength="5"
              autocomplete="street-address"
              aria-label="Street address"
            />
          </div>
        </div>

        {/* Homeowner Checkbox */}
        <label class="flex items-center gap-2 cursor-pointer">
          <input
            type="checkbox"
            checked={isHomeowner ?? true}
            class="w-5 h-5 rounded border-gray-300"
            id="isHomeownerInput"
            name="isHomeownerInput"
            aria-label="I am the homeowner"
          />
          <span class="text-[#111928] text-sm font-medium font-['Inter']"
            >I'm the homeowner</span
          >
        </label>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script
  src={`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places&&loading=async&callback=initializeGoogleMaps`}
  defer
  async
  data-astro-rerun></script>

<script>
  import { estimateParser } from "@stores/estimateProgress";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  // TypeScript declaration to extend Window interface
  declare global {
    interface Window {
      initializeGoogleMaps: () => void;
    }
  }

  // Define global callback function for Google Maps script
  window.initializeGoogleMaps = function () {
    // Initialize controller when maps API is ready
    if (document.getElementById("streetAddressInput")) {
      new AddressFormController();
    }
  };

  class AddressFormController {
    private addressInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private addressParser = estimateParser.pick({ streetAddress: true });
    private autocomplete: google.maps.places.Autocomplete | null = null;

    constructor() {
      this.addressInput = document.getElementById(
        "streetAddressInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.initialize();

      // Only initialize autocomplete if Google Maps API is loaded
      if (window.google && window.google.maps && window.google.maps.places) {
        this.initializeAutocomplete();
      }
    }

    private initialize(): void {
      if (!this.addressInput || !this.submitButton) {
        console.error("Required form elements not found");
        return;
      }

      if (this.addressInput.value.length >= 5) {
        const isValid = this.validateAddress(this.addressInput.value);
        this.updateButtonState(isValid);
      }

      this.addressInput.addEventListener("input", this.handleAddressInput);
    }

    /**
     * Initializes Google Maps Places Autocomplete
     */
    private initializeAutocomplete(): void {
      if (!this.addressInput) return;

      try {
        this.autocomplete = new google.maps.places.Autocomplete(
          this.addressInput,
          {
            componentRestrictions: { country: "US" },
            fields: ["address_components", "formatted_address"],
            types: ["address"],
          }
        );
      } catch (error) {
        console.error("Error initializing Google Maps Autocomplete:", error);
        return;
      }

      this.autocomplete.addListener("place_changed", () => {
        const place = this.autocomplete?.getPlace();
        if (!place?.address_components) return;

        // Extract address components
        let streetNumber = "";
        let streetName = "";
        let zipCode = "";
        let city = "";
        let state = "";

        place.address_components.forEach((component) => {
          const type = component.types[0];
          switch (type) {
            case "street_number":
              streetNumber = component.long_name;
              break;
            case "route":
              streetName = component.long_name;
              break;
            case "postal_code":
              zipCode = component.long_name;
              break;
            case "locality":
              city = component.long_name;
              break;
            case "administrative_area_level_1":
              state = component.short_name; // Using short_name for state abbreviation (e.g., 'CA' instead of 'California')
              break;
          }
        });

        // Combine street number and name for the street address only
        const streetAddress = `${streetNumber} ${streetName}`.trim();

        // Update the visible input with just the street address
        if (streetAddress) {
          this.addressInput!.value = streetAddress;
        }

        // Create or update hidden inputs for additional address components
        const createOrUpdateHiddenInput = (name: string, value: string) => {
          let input = this.addressInput?.form?.querySelector(
            `input[name="${name}"]`
          ) as HTMLInputElement;
          if (!input) {
            input = document.createElement("input");
            input.type = "hidden";
            input.name = name;
            this.addressInput?.form?.appendChild(input);
          }
          input.value = value;
        };

        createOrUpdateHiddenInput("zipCodeInput", zipCode);
        createOrUpdateHiddenInput("cityInput", city);
        createOrUpdateHiddenInput("stateInput", state);

        const isValid = this.validateAddress(streetAddress);
        this.updateButtonState(isValid);
      });
    }

    /**
     * Validates the address input
     * @returns boolean indicating if address is valid
     */
    private validateAddress(value: string): boolean {
      const zipInput = this.addressInput?.form?.querySelector(
        'input[name="zipCodeInput"]'
      ) as HTMLInputElement;

      return this.addressParser.safeParse({
        streetAddress: value,
        ...(zipInput?.value && { zipCode: zipInput?.value }),
      }).success;
    }

    /**
     * Updates submit button state based on validation
     */
    private updateButtonState(isValid: boolean): void {
      if (this.submitButton) {
        this.submitButton.setAttribute(
          "aria-disabled",
          !isValid ? "true" : "false"
        );
      }
    }

    /**
     * Handles address input changes
     */
    private handleAddressInput = (event: Event): void => {
      const input = event.target as HTMLInputElement;
      const isValid = this.validateAddress(input.value);
      this.updateButtonState(isValid);
    };
  }

  function initAddressController() {
    // Only create a new controller if the address input exists
    // The Google Maps callback may also initialize it, so we avoid duplicating
    if (document.getElementById("streetAddressInput")) {
      new AddressFormController();
    }
  }

  crossPlatformLoader(() => initAddressController());
</script>
