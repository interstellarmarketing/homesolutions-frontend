---
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import StepLayout from "@components/step-layout/index.astro";
import { shortTradeEnum } from "@assets/info/estimateOptions";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";

// Create page-specific parser
const addressSchema = z.object({
  streetAddress: z.string().min(5),
  zipCode: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  isHomeowner: z.boolean().optional(),
});

interface PageState {
  estimateType: string;
  streetAddress: string | undefined;
  zipCode: string | undefined;
  city: string | undefined;
  state: string | undefined;
  isHomeowner: boolean;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, {
      status: 302,
      headers: { Location: appendQueryParams("/", searchParams) },
    });
  }

  // Get step information
  const estimateType = validatedEstimateType.data;
  const stepNumber = getCurrentStepNumber(estimateType, "address");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType: validatedEstimateType.data,
    streetAddress: searchParams.get("streetAddress") || undefined,
    zipCode: searchParams.get("zipCode") || undefined,
    city: searchParams.get("city") || undefined,
    state: searchParams.get("state") || undefined,
    isHomeowner: searchParams.get("isHomeowner") === "true",
    stepNumber,
    totalSteps,
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const addressData = {
    streetAddress: formData.get("streetAddressInput"),
    zipCode: formData.get("zipCodeInput"),
    city: formData.get("cityInput"),
    state: formData.get("stateInput"),
    isHomeowner: formData.get("isHomeownerInput") === "on",
  };

  const addressParsed = addressSchema.safeParse(addressData);
  if (!addressParsed.success) {
    return null;
  }

  // Pass address data as URL parameters
  const url = new URL(request.url);
  Object.entries(addressParsed.data).forEach(([key, value]) => {
    if (value !== undefined) {
      url.searchParams.set(key, value.toString());
    }
  });

  // The next step will be determined client-side
  const redirectUrl = `/estimate/${estimateType}/`;
  return new Response(null, {
    status: 302,
    headers: {
      Location: appendQueryParams(redirectUrl, url.searchParams),
    },
  });
}

// Process the page based on the request method
let pageState: PageState | Response;
if (Astro.request.method === "POST") {
  const result = await handleFormSubmission(
    Astro.request,
    Astro.params.estimateType || ""
  );
  if (result) {
    return result;
  }
}

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

const stepHeader = "What is your street address?";

// Add this near the top of your frontmatter
const GOOGLE_MAPS_API_KEY = import.meta.env.PUBLIC_GOOGLE_MAPS_API_KEY;
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="addressForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber < pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <div
        class="flex flex-col gap-4 text-center rounded-lg container w-full max-w-md mx-auto"
      >
        <div class="flex flex-col gap-2">
          <label
            for="streetAddressInput"
            class="self-stretch text-[#111928] text-sm font-medium font-['Inter'] leading-[21px] text-left"
          >
            Street Address
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
            >
              <img src="/static/pin.png" alt="map pin" class="w-5 h-5" />
            </div>
            <input
              type="text"
              required
              class="w-full bg-gray-50 rounded-lg border border-gray-300 py-3.5 pl-10 pr-4 text-base font-normal font-['Inter'] leading-normal text-gray-500"
              placeholder="Enter"
              id="streetAddressInput"
              name="streetAddressInput"
              value={pageState.streetAddress}
              minlength="5"
              autocomplete="street-address"
              aria-label="Street address"
            />
          </div>
        </div>

        {/* Homeowner Checkbox */}
        <label class="flex items-center gap-2 cursor-pointer">
          <input
            type="checkbox"
            checked={pageState.isHomeowner}
            class="w-5 h-5 rounded border-gray-300"
            id="isHomeownerInput"
            name="isHomeownerInput"
            aria-label="I am the homeowner"
          />
          <span class="text-[#111928] text-sm font-medium font-['Inter']"
            >I'm the homeowner</span
          >
        </label>
      </div>
    </StepLayout>
  </form>
</EstimateWrapper>

<script
  src={`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places&&loading=async&callback=initializeGoogleMaps`}
  defer
  async
  data-astro-rerun></script>

<script>
  import { estimateStore, estimateParser } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { getNextStep } from "src/consts/estimateSteps";
  import { shortTradeEnum } from "@assets/info/estimateOptions";
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";

  // TypeScript declaration to extend Window interface
  declare global {
    interface Window {
      initializeGoogleMaps: () => void;
    }
  }

  // Define global callback function for Google Maps script
  window.initializeGoogleMaps = function () {
    // Initialize controller when maps API is ready
    if (document.getElementById("streetAddressInput")) {
      new AddressFormController();
    }
  };

  class AddressFormController {
    private addressInput: HTMLInputElement | null;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private addressParser = estimateParser.pick({ streetAddress: true });
    private autocomplete: google.maps.places.Autocomplete | null = null;
    private estimateType: string;

    constructor() {
      this.addressInput = document.getElementById(
        "streetAddressInput"
      ) as HTMLInputElement;
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById("addressForm") as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();

      // Only initialize autocomplete if Google Maps API is loaded
      if (window.google && window.google.maps && window.google.maps.places) {
        this.initializeAutocomplete();
      }
    }

    private initialize(): void {
      if (
        !this.addressInput ||
        !this.submitButton ||
        !this.form ||
        !this.estimateType
      ) {
        console.error("Required form elements not found");
        return;
      }

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "address",
        estimateType: validatedEstimateType.data,
      });

      if (this.addressInput.value.length >= 5) {
        const isValid = this.validateAddress(this.addressInput.value);
        this.updateButtonState(isValid);
      }

      this.addressInput.addEventListener("input", this.handleAddressInput);
      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }

    /**
     * Initializes Google Maps Places Autocomplete
     */
    private initializeAutocomplete(): void {
      if (!this.addressInput) return;

      try {
        this.autocomplete = new google.maps.places.Autocomplete(
          this.addressInput,
          {
            componentRestrictions: { country: "US" },
            fields: ["address_components", "formatted_address"],
            types: ["address"],
          }
        );
      } catch (error) {
        console.error("Error initializing Google Maps Autocomplete:", error);
        return;
      }

      this.autocomplete.addListener("place_changed", () => {
        const place = this.autocomplete?.getPlace();
        if (!place?.address_components) return;

        // Extract address components
        let streetNumber = "";
        let streetName = "";
        let zipCode = "";
        let city = "";
        let state = "";

        place.address_components.forEach((component) => {
          const type = component.types[0];
          switch (type) {
            case "street_number":
              streetNumber = component.long_name;
              break;
            case "route":
              streetName = component.long_name;
              break;
            case "postal_code":
              zipCode = component.long_name;
              break;
            case "locality":
              city = component.long_name;
              break;
            case "administrative_area_level_1":
              state = component.short_name; // Using short_name for state abbreviation (e.g., 'CA' instead of 'California')
              break;
          }
        });

        // Combine street number and name for the street address only
        const streetAddress = `${streetNumber} ${streetName}`.trim();

        // Update the visible input with just the street address
        if (streetAddress) {
          this.addressInput!.value = streetAddress;
        }

        // Create or update hidden inputs for additional address components
        const createOrUpdateHiddenInput = (name: string, value: string) => {
          let input = this.addressInput?.form?.querySelector(
            `input[name="${name}"]`
          ) as HTMLInputElement;
          if (!input) {
            input = document.createElement("input");
            input.type = "hidden";
            input.name = name;
            this.addressInput?.form?.appendChild(input);
          }
          input.value = value;
        };

        createOrUpdateHiddenInput("zipCodeInput", zipCode);
        createOrUpdateHiddenInput("cityInput", city);
        createOrUpdateHiddenInput("stateInput", state);

        const isValid = this.validateAddress(streetAddress);
        this.updateButtonState(isValid);
      });
    }

    /**
     * Validates the address input
     * @returns boolean indicating if address is valid
     */
    private validateAddress(value: string): boolean {
      const zipInput = this.addressInput?.form?.querySelector(
        'input[name="zipCodeInput"]'
      ) as HTMLInputElement;

      return this.addressParser.safeParse({
        streetAddress: value,
        ...(zipInput?.value && { zipCode: zipInput?.value }),
      }).success;
    }

    /**
     * Updates submit button state based on validation
     */
    private updateButtonState(isValid: boolean): void {
      if (this.submitButton) {
        this.submitButton.setAttribute(
          "aria-disabled",
          !isValid ? "true" : "false"
        );
      }
    }

    /**
     * Handles address input changes
     */
    private handleAddressInput = (event: Event): void => {
      const input = event.target as HTMLInputElement;
      const isValid = this.validateAddress(input.value);
      this.updateButtonState(isValid);
    };

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form || !this.addressInput) return;

      const streetAddress = this.addressInput.value;
      const zipInput = this.form.querySelector(
        'input[name="zipCodeInput"]'
      ) as HTMLInputElement;
      const cityInput = this.form.querySelector(
        'input[name="cityInput"]'
      ) as HTMLInputElement;
      const stateInput = this.form.querySelector(
        'input[name="stateInput"]'
      ) as HTMLInputElement;
      const isHomeownerInput = this.form.querySelector(
        'input[name="isHomeownerInput"]'
      ) as HTMLInputElement;

      const addressData = {
        streetAddress,
        zipCode: zipInput?.value,
        city: cityInput?.value,
        state: stateInput?.value,
        isHomeowner: isHomeownerInput?.checked,
      };

      // Update store
      const existingStore = estimateStore.get();
      estimateStore.set({
        ...existingStore,
        ...addressData,
      });

      // Get next step
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(validatedEstimateType.data, "address");
        if (nextStep) {
          const url = new URL(window.location.href);
          url.pathname = `/estimate/${this.estimateType}/${nextStep}`;

          // Add address data as URL parameters
          url.searchParams.set("streetAddress", streetAddress);
          if (zipInput?.value) url.searchParams.set("zipCode", zipInput.value);
          if (cityInput?.value) url.searchParams.set("city", cityInput.value);
          if (stateInput?.value)
            url.searchParams.set("state", stateInput.value);
          url.searchParams.set(
            "isHomeowner",
            isHomeownerInput?.checked ? "true" : "false"
          );

          window.location.href = url.toString();
          return;
        }
      }

      // Fallback to thank-you
      const url = new URL(window.location.href);
      url.pathname = `/estimate/${this.estimateType}/thank-you`;

      // Add address data as URL parameters
      url.searchParams.set("streetAddress", streetAddress);
      if (zipInput?.value) url.searchParams.set("zipCode", zipInput.value);
      if (cityInput?.value) url.searchParams.set("city", cityInput.value);
      if (stateInput?.value) url.searchParams.set("state", stateInput.value);
      url.searchParams.set(
        "isHomeowner",
        isHomeownerInput?.checked ? "true" : "false"
      );

      window.location.href = url.toString();
    }
  }

  function initAddressController() {
    // Only create a new controller if the address input exists
    // The Google Maps callback may also initialize it, so we avoid duplicating
    if (document.getElementById("streetAddressInput")) {
      new AddressFormController();
    }
  }

  crossPlatformLoader(() => initAddressController());
</script>
