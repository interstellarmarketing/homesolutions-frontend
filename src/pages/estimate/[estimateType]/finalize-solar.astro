---
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { shortTradeEnum } from "@models/estimateOptions";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";

interface PageState {
  estimateType: string;
  ipAddress: string | null;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const validatedEstimateType = shortTradeEnum.safeParse(params.estimateType);
  if (!validatedEstimateType.success) {
    return new Response(null, {
      status: 302,
      headers: { Location: appendQueryParams("/", searchParams) },
    });
  }

  return {
    estimateType: validatedEstimateType.data,
    ipAddress:
      Astro?.request?.headers?.get("cf-connecting-ip") ||
      Astro?.request?.headers?.get("x-real-ip") ||
      Astro?.request?.headers?.get("x-forwarded-for")?.split(",")[0] ||
      null,
  };
}

const pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <div
    class="w-full h-full bg-white rounded-2xl md:shadow-[0px_2px_20px_0px_rgba(0,0,0,0.10)] md:p-8 mt-12"
    data-estimate-type={pageState.estimateType}
    data-ip-address={pageState.ipAddress}
  >
    <div class="portal-container w-full h-full" id="freedomportal">
      <iframe
        allow="autoplay"
        allowfullscreen=""
        class="w-full h-full"
        frameborder="1"
        height="400px"
        marginheight="0px"
        marginwidth="0px"
        name="myiFrame"
        sandbox="allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts allow-top-navigation allow-top-navigation-by-user-activation"
        scrolling="no"
        src=""
        style="border:0px #ffffff none;"
        id="freedom-iframe"></iframe>
    </div>
  </div>
</EstimateWrapper>

<script>
  import { estimateStore } from "@stores/estimateProgress";
  import { estimateParser } from "@models/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { shortTradeEnum } from "@models/estimateOptions";
  import { actions } from "astro:actions";

  // Declare zaraz for TypeScript
  declare const zaraz:
    | {
        track: (eventName: string, data: any) => void;
      }
    | undefined;

  interface StoreWithIpAddress extends ReturnType<typeof estimateParser.parse> {
    ipAddress?: string | null;
  }

  class FinalizeSolarController {
    private estimateType: string;
    private iframe: HTMLIFrameElement | null;

    constructor() {
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.iframe = document.getElementById(
        "freedom-iframe"
      ) as HTMLIFrameElement;
      this.initialize();
    }

    private updateIframeSrc(store: StoreWithIpAddress) {
      if (!this.iframe) return;

      const params = new URLSearchParams({
        lead_id:
          store.freedomLeadId !== undefined ? `${store.freedomLeadId}` : "",
        token: "xiohQI7fv1KMp4TXXOztptNAbj11FfyKlu7gclQkapjmYvWJ",
        authorization_token: "JiUIX1ZB1RlJcKRBqGjN",
        affiliate_id: "Mjc1",
        campaign_id: "MjM0NA==",
        self_book_campaign_id: "MjQwNQ==",
        first_name: store.firstName || "",
        zip_code: store.zipCode || "",
        last_name: store.lastName || "",
        phone: store.phone || "",
        email: store.email || "",
        address: store.streetAddress || "",
        credit_score: "",
        electric_bill: "",
        utility_company: "Other",
        Facebook_Ad_ID: "",
        Trusted_Form: store.trackingParams?.trustedFormCertUrl || "",
        home_ownership: store.isHomeowner ? "1" : "0",
        Language: "english",
        Roof_Shading: store.shadedRoof ? "1" : "0",
        Bill_Discounts: "No",
        Self_Set_Apt_Notes: "",
        Facebook_Click_ID: store.trackingParams?.fbclid || "",
        Facebook_Browser_ID: "",
        Ip_Address: store.ipAddress || "",
        User_Agent: store.trackingParams?.userAgent || "",
      });

      this.iframe.src = `https://bp-portal.freedomforever.com/open/affiliate/self-book?${params.toString()}`;
    }

    private async trackConversion(store: StoreWithIpAddress) {
      try {
        const response = await fetch(
          "https://google-advanced-conversions.zsmithbiz1.workers.dev/",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              system: {
                timestamp: new Date().toISOString(),
              },
              client: {
                email: store.email,
              },
            }),
          }
        );

        const hashedEmail = await response.text();
        const req = {
          event_name: "Lead",
          event_id: crypto.randomUUID(),
          event_time: new Date().toISOString(),
          action_source: "website",
          event_source_url: window.location.href,
          user_data: {
            sha256_email_address: hashedEmail,
            fbc: store.trackingParams?.fbc,
            fbp: store.trackingParams?.fbp,
            client_user_agent: window.navigator.userAgent,
            fn: store.firstName,
            ln: store.lastName,
            em: store.email,
            ph: store.phone,
            external_id: store.trackingParams?.posthogPersonId,
          },
        };

        const eventName = `completed_${store.estimateShortTrade}_estimate`;
        zaraz?.track(eventName, req);
        console.log(`Zaraz event sent (${eventName}):`, req);
      } catch (error) {
        console.error("Error tracking conversion:", error);
      }
    }

    private async initialize() {
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "finalize-solar",
        estimateType: validatedEstimateType.data,
      });

      // Process submission
      const store = estimateParser.parse(estimateStore.get());
      const ipAddress =
        document
          .querySelector("[data-ip-address]")
          ?.getAttribute("data-ip-address") || null;

      const storeWithIp = { ...store, ipAddress };

      // Update iframe src with store values
      this.updateIframeSrc(storeWithIp);

      if (!store.submitted) {
        await actions.processSubmission(storeWithIp);
        await this.trackConversion(storeWithIp);

        estimateStore.set({
          ...store,
          submitted: true,
        });
      }
    }
  }

  new FinalizeSolarController();
</script>
