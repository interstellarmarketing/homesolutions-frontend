---
/**
 * Solar Reason Page
 * Collects information about the main reason
 * why the customer is interested in going solar
 */

import { z } from "zod";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import {
  shortTradeEnum,
  tradeOptionDescriptions,
} from "@models/estimateOptions";
import {
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "src/consts/estimateSteps";
import StepLayout from "@components/step-layout/index.astro";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import { appendQueryParams } from "@utils/queryParams";

// Schema definitions
const actionSchema = z.string();
const estimateTypeSchema = shortTradeEnum;

// Solar reason options
const solarReasonOptions = [
  "Lower My Electric Bill",
  "Power Outages",
  "Go Green",
  "Increase Home Value",
  "Adding Panels To My System",
];

/**
 * Represents the state of the page
 * @interface PageState
 */
interface PageState {
  estimateType: string;
  stepNumber: number;
  totalSteps: number;
}

/**
 * Initializes the page state based on URL parameters
 * @param {Record<string, string | undefined>} params - URL parameters
 * @returns {PageState | Response} Either the page state or a redirect response
 */
function initializePage(
  params: Record<string, string | undefined>
): PageState | Response {
  // Validate the estimate type from URL parameters
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  const estimateType = parsedEstimateType.data;

  // Find the trade options for the current estimate type
  const tradeOptions = tradeOptionDescriptions.find(
    (option) => option.shortTrade === estimateType
  );

  // Get step information
  const stepNumber = getCurrentStepNumber(estimateType, "solar-reason");
  const totalSteps = getStoreSteps(estimateType);

  return {
    estimateType,
    stepNumber,
    totalSteps,
  };
}

// Process the page based on the request method
let pageState: PageState | Response;

pageState = initializePage(Astro.params);

if (pageState instanceof Response) {
  return pageState;
}

// Always set the specific solar question
const stepHeader = "What's the main reason you're interested in going solar?";
---

<!-- Template section -->
<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="solarReasonForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber <= pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={solarReasonOptions}
        name="action"
        currentSelection={undefined}
        layout="flex"
      />
    </StepLayout>
  </form>
</EstimateWrapper>

<script>
  import { crossPlatformLoader } from "@utils/crossPlatformLoader";
  import {
    shortTradeEnum,
    type EstimateOptionsSolarSchema,
  } from "@models/estimateOptions";
  import { estimateProgressStore } from "@stores/estimateProgress";
  import { estimateStepsStore } from "@stores/estimateStepsStore";
  import { getNextStep } from "src/consts/estimateSteps";
  import { navigate } from "astro:transitions/client";
  import { appendQueryParams } from "@utils/queryParams";

  /**
   * Controls the form behavior and button states
   */
  class FormController {
    private radioButtons: NodeListOf<HTMLInputElement>;
    private submitButton: HTMLButtonElement | null;
    private form: HTMLFormElement | null;
    private estimateType: string;

    constructor() {
      this.radioButtons = document.querySelectorAll('input[name="action"]');
      console.log("radio buttons", this.radioButtons);
      this.submitButton = document.getElementById(
        "nextStepButton"
      ) as HTMLButtonElement;
      this.form = document.getElementById("solarReasonForm") as HTMLFormElement;
      this.estimateType =
        document
          .querySelector("[data-estimate-type]")
          ?.getAttribute("data-estimate-type") || "";
      this.initialize();
    }

    /**
     * Sets up event listeners for radio buttons and checks initial state
     */
    private initialize() {
      console.log("estimate type", this.estimateType);
      if (
        !this.submitButton ||
        !this.radioButtons.length ||
        !this.form ||
        !this.estimateType
      )
        return;

      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (!validatedEstimateType.success) {
        console.error("Invalid estimate type");
        return;
      }

      // Initialize stores
      estimateStepsStore.set({
        currentStep: "solar-reason",
        estimateType: validatedEstimateType.data,
      });

      // Check store for initial selection and set the radio button accordingly
      const storeData = estimateProgressStore.get();
      const estimateOptions =
        storeData.estimate_options as EstimateOptionsSolarSchema;
      if (estimateOptions?.solar_reason) {
        // Find and check the matching radio button
        const radioToCheck = Array.from(this.radioButtons).find(
          (radio) => radio.value === estimateOptions.solar_reason
        );

        if (radioToCheck) {
          radioToCheck.checked = true;
          this.submitButton.setAttribute("aria-disabled", "false");
        } else {
          this.submitButton.setAttribute("aria-disabled", "true");
        }
      } else {
        this.submitButton.setAttribute("aria-disabled", "true");
      }

      this.radioButtons.forEach((radio) => {
        radio.addEventListener("change", () => this.handleRadioChange());
      });

      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }

    private handleRadioChange() {
      if (!this.submitButton) return;

      console.log("radio changed", this.radioButtons);

      const isSelected = Array.from(this.radioButtons).some(
        (radio) => radio.checked
      );
      this.submitButton.setAttribute(
        "aria-disabled",
        !isSelected ? "true" : "false"
      );
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();

      if (!this.form) return;

      const selectedReason = Array.from(this.radioButtons).find(
        (radio) => radio.checked
      )?.value;

      console.log("selected reason", selectedReason);

      if (!selectedReason) return;

      // Update store
      const existingStore = estimateProgressStore.get();
      estimateProgressStore.set({
        ...existingStore,
        estimate_options: {
          ...(existingStore.estimate_options as EstimateOptionsSolarSchema),
          solar_reason: selectedReason,
        },
      });

      // Get next step
      const validatedEstimateType = shortTradeEnum.safeParse(this.estimateType);
      if (validatedEstimateType.success) {
        const nextStep = getNextStep(
          validatedEstimateType.data,
          "solar-reason"
        );
        if (nextStep) {
          const currentUrl = new URL(window.location.href);
          navigate(
            appendQueryParams(
              `/estimate/${this.estimateType}/${nextStep}`,
              new URLSearchParams(currentUrl.search)
            )
          );
          return;
        }
      }
    }
  }

  crossPlatformLoader(() => new FormController());
</script>
