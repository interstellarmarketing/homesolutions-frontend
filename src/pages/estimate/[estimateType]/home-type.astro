---
import { z } from "zod";
import { estimateStore } from "@stores/estimateProgress";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import {
  shortTradeEnum,
  tradeOptionDescriptions,
  homeTypesConst,
} from "@assets/info/estimateOptions";
import {
  activeEstimateTypeStore,
  computedEstimateOptions,
} from "@stores/activeEstimateType";
import {
  estimateStepsStore,
  getNextStep,
  getPreviousStep,
  getCurrentStepNumber,
  getTotalSteps as getStoreSteps,
} from "@stores/estimateStepsStore";
import StepLayout from "@components/step-layout/index.astro";
import { getTotalSteps } from "@utils/layout";

// Schema definitions
const homeTypeSchema = z.enum(homeTypesConst);
const estimateTypeSchema = shortTradeEnum;

interface PageState {
  estimateType: string;
  tradeDescription: string | undefined;
  homeTypes: typeof homeTypesConst;
  currentSelection: string | undefined;
}

function initializePage(
  params: Record<string, string | undefined>
): PageState | Response {
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  const estimateType = parsedEstimateType.data;

  // Update the estimate steps store with current page
  estimateStepsStore.set({
    currentStep: "home-type",
    estimateType: estimateType,
  });

  const activeEstimateOptions = computedEstimateOptions.get();

  console.log({ activeEstimateOptions, page: "home-type" });

  if (!activeEstimateOptions) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  const tradeOptions = tradeOptionDescriptions.find(
    (option) => option.shortTrade === activeEstimateTypeStore.get()
  );

  return {
    estimateType,
    tradeDescription: tradeOptions?.typeDescription,
    homeTypes: homeTypesConst,
    currentSelection: estimateStore.get().homeType,
  };
}

async function handleFormSubmission(request: Request, estimateType: string) {
  const formData = await request.formData();
  const homeTypeParsed = homeTypeSchema.safeParse(formData.get("homeType"));

  if (!homeTypeParsed.success) {
    return null;
  }

  const existingStore = estimateStore.get();
  estimateStore.set({
    ...existingStore,
    homeType: homeTypeParsed.data,
  });

  // Get the next step from the store
  const validatedEstimateType = estimateTypeSchema.safeParse(estimateType);
  if (validatedEstimateType.success) {
    const nextStep = getNextStep(validatedEstimateType.data, "home-type");

    console.log({ nextStep, page: "home-type" });

    if (nextStep) {
      return new Response(null, {
        status: 302,
        headers: { Location: `/estimate/${estimateType}/${nextStep}` },
      });
    }
  }

  // Fallback to original logic
  if (estimateType === "roofing") {
    return new Response(null, {
      status: 302,
      headers: { Location: `/estimate/${estimateType}/credit-score` },
    });
  }

  return new Response(null, {
    status: 302,
    headers: { Location: `/estimate/${estimateType}/contact` },
  });
}

// Process the page based on the request method
let pageState: PageState | Response;
if (Astro.request.method === "POST") {
  const result = await handleFormSubmission(
    Astro.request,
    Astro.params.estimateType || ""
  );
  if (result) {
    return result;
  }
}

pageState = initializePage(Astro.params);

if (pageState instanceof Response) {
  return pageState;
}

// Get previous page URL for back button
const validatedEstimateType = estimateTypeSchema.safeParse(
  pageState.estimateType
);
const prevStep = validatedEstimateType.success
  ? getPreviousStep(validatedEstimateType.data, "home-type")
  : null;
const prevUrl = prevStep
  ? `/estimate/${pageState.estimateType}/${prevStep}`
  : `/estimate/${pageState.estimateType}/action`;

// Get step number and total from store
const stepNumber = validatedEstimateType.success
  ? getCurrentStepNumber(validatedEstimateType.data, "home-type")
  : 1;
const totalSteps = validatedEstimateType.success
  ? getStoreSteps(validatedEstimateType.data)
  : 5;

const getStepHeader = () => {
  switch (pageState.estimateType) {
    case "roofing":
      return "What type of home do you have?";
    default:
      return "What type of home do you have?";
  }
};
const stepHeader = getStepHeader();
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form method="post">
    <input
      type="hidden"
      id="hasInitialSelection"
      value={pageState.currentSelection ? "true" : "false"}
    />

    <StepLayout
      stepHeader={stepHeader}
      hasNextStep
      hasPrevStep={stepNumber > 1}
      stepNumber={stepNumber}
      totalSteps={totalSteps}
      estimateType={pageState.estimateType}
    >
      <div class="flex flex-col gap-4 text-center rounded-lg container">
        <div class="grid grid-cols-2 gap-4">
          {
            pageState.homeTypes.map((homeType, index) => (
              <label class="inline-flex items-center">
                <input
                  type="radio"
                  name="homeType"
                  checked={pageState.currentSelection === homeType}
                  value={homeType}
                  class="hidden peer"
                />
                <span class="w-full h-full px-5 py-2.5 rounded-lg bg-[#F9FAFB] border border-[#E5E7EB] text-[#2D3748] text-sm font-medium leading-[21px] cursor-pointer peer-checked:bg-[#2D3748] peer-checked:text-white peer-checked:border-[#E5E7EB] transition-colors flex justify-center items-center gap-2 capitalize">
                  {homeType}
                </span>
              </label>
            ))
          }
        </div>
      </div>
    </StepLayout>
  </form>

  <script>
    class FormController {
      private radioButtons: NodeListOf<HTMLInputElement>;
      private submitButton: HTMLButtonElement | null;

      constructor() {
        this.radioButtons = document.querySelectorAll('input[name="homeType"]');
        this.submitButton = document.getElementById(
          "nextStepButton"
        ) as HTMLButtonElement;
        this.initialize();
      }

      private initialize() {
        if (!this.submitButton || !this.radioButtons.length) return;

        const hasInitialSelection = document.getElementById(
          "hasInitialSelection"
        ) as HTMLInputElement;
        if (hasInitialSelection?.value === "true") {
          this.submitButton.disabled = false;
        }

        this.radioButtons.forEach((radio) => {
          radio.addEventListener("change", () => this.handleRadioChange());
        });
      }

      private handleRadioChange() {
        if (!this.submitButton) return;

        const isSelected = Array.from(this.radioButtons).some(
          (radio) => radio.checked
        );
        this.submitButton.disabled = !isSelected;
      }
    }

    new FormController();
  </script>
</EstimateWrapper>
