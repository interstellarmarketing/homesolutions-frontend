---
import { homeTypesConst, shortTradeEnum } from "@models/estimateOptions";
import LargeRadioButtonGroup from "@components/radio-button/LargeRadioButtonGroup.astro";
import StepLayout from "@components/step-layout/index.astro";
import EstimateWrapper from "@layouts/EstimateWrapper.astro";
import { appendQueryParams } from "@utils/queryParams";
import { z } from "zod";
import { getCurrentStepNumber, getTotalSteps } from "@consts/estimateSteps";
// Schema definitions
const homeTypeSchema = z.enum(homeTypesConst);
const estimateTypeSchema = shortTradeEnum;

interface PageState {
  estimateType: string;
  homeTypes: typeof homeTypesConst;
  stepNumber: number;
  totalSteps: number;
}

function initializePage(
  params: Record<string, string | undefined>,
  searchParams: URLSearchParams
): PageState | Response {
  const parsedEstimateType = estimateTypeSchema.safeParse(params.estimateType);

  if (!parsedEstimateType.success) {
    return new Response(null, { status: 302, headers: { Location: "/" } });
  }

  const estimateType = parsedEstimateType.data;

  // Get step information
  const stepNumber = getCurrentStepNumber(estimateType, "home-type");
  const totalSteps = getTotalSteps(estimateType);

  return {
    estimateType,
    homeTypes: homeTypesConst,
    stepNumber,
    totalSteps,
  };
}

// Process the page based on the request method
let pageState: PageState | Response;

pageState = initializePage(Astro.params, Astro.url.searchParams);

if (pageState instanceof Response) {
  return pageState;
}

// These will be determined client-side
const stepNumber = 1;
const totalSteps = 5;
const stepHeader = "What type of home do you have?";
---

<EstimateWrapper
  title={pageState.estimateType}
  estimateType={pageState.estimateType}
>
  <form
    method="post"
    id="homeTypeForm"
    data-estimate-type={pageState.estimateType}
  >
    <StepLayout
      stepHeader={stepHeader}
      stepNumber={pageState.stepNumber}
      totalSteps={pageState.totalSteps}
      hasNextStep={pageState.stepNumber <= pageState.totalSteps}
      hasPrevStep={pageState.stepNumber > 1}
      estimateType={pageState.estimateType}
    >
      <LargeRadioButtonGroup
        options={pageState.homeTypes}
        name="homeType"
        currentSelection={undefined}
        layout="flex"
        capitalize={true}
      />
    </StepLayout>
  </form>

  <script>
    import {
      homeTypesConst,
      shortTradeEnum,
      tradeOptionDescriptions,
      type ShortTradeEnum,
    } from "@models/estimateOptions";
    import {
      getCurrentStepNumber,
      getNextStep,
      getTotalSteps,
    } from "@consts/estimateSteps";
    import { activeEstimateTypeStore } from "@stores/activeEstimateType";
    import { estimateProgressStore } from "@stores/estimateProgress";
    import { estimateStepsStore } from "@stores/estimateStepsStore";
    import { crossPlatformLoader } from "@utils/crossPlatformLoader";
    import { appendQueryParams } from "@utils/queryParams";
    import { navigate } from "astro:transitions/client";

    class FormController {
      private radioButtons: NodeListOf<HTMLInputElement>;
      private submitButton: HTMLButtonElement | null;
      private form: HTMLFormElement | null;
      private estimateType!: ShortTradeEnum;

      constructor() {
        this.radioButtons = document.querySelectorAll('input[name="homeType"]');
        this.submitButton = document.getElementById(
          "nextStepButton"
        ) as HTMLButtonElement;
        this.form = document.getElementById("homeTypeForm") as HTMLFormElement;
        const rawEstimateType =
          document
            .querySelector("[data-estimate-type]")
            ?.getAttribute("data-estimate-type") || "";

        this.estimateType = rawEstimateType as ShortTradeEnum;

        this.initialize();
      }

      private initialize() {
        if (!this.submitButton || !this.radioButtons.length || !this.form)
          return;

        const validatedEstimateType = shortTradeEnum.safeParse(
          this.estimateType
        );
        if (!validatedEstimateType.success) {
          console.error("Invalid estimate type");
          return;
        }

        // Initialize stores
        estimateStepsStore.set({
          currentStep: "home-type",
          estimateType: this.estimateType,
        });

        // Set trade description
        const tradeOptions = tradeOptionDescriptions.find(
          (option) => option.shortTrade === activeEstimateTypeStore.get()
        );

        // Update step info
        const stepNumber = getCurrentStepNumber(this.estimateType, "home-type");
        const totalSteps = getTotalSteps(this.estimateType);
        document
          .querySelector("[data-step-number]")
          ?.setAttribute("data-step-number", String(stepNumber));
        document
          .querySelector("[data-total-steps]")
          ?.setAttribute("data-total-steps", String(totalSteps));

        // Check store for initial selection and set the radio button accordingly
        const storeData = estimateProgressStore.get();
        if (storeData.property_type) {
          // Find and check the matching radio button
          const radioToCheck = Array.from(this.radioButtons).find(
            (radio) => radio.value === storeData.property_type
          );

          if (radioToCheck) {
            radioToCheck.checked = true;
            this.submitButton.setAttribute("aria-disabled", "false");
          } else {
            this.submitButton.setAttribute("aria-disabled", "true");
          }
        } else {
          this.submitButton.setAttribute("aria-disabled", "true");
        }

        this.radioButtons.forEach((radio) => {
          radio.addEventListener("change", () => this.handleRadioChange());
        });

        this.form.addEventListener("submit", (e) => this.handleSubmit(e));
      }

      private handleRadioChange() {
        if (!this.submitButton) return;

        const isSelected = Array.from(this.radioButtons).some(
          (radio) => radio.checked
        );
        this.submitButton.setAttribute(
          "aria-disabled",
          !isSelected ? "true" : "false"
        );
      }

      private handleSubmit(e: Event) {
        e.preventDefault();

        const formData = new FormData(this.form!);
        const homeType = formData
          .get("homeType")
          ?.toString() as (typeof homeTypesConst)[number];

        if (homeType && homeTypesConst.includes(homeType)) {
          // Update store
          const existingStore = estimateProgressStore.get();
          estimateProgressStore.set({
            ...existingStore,
            property_type: homeType,
          });

          // Get next step
          const nextStep = getNextStep(this.estimateType, "home-type");
          if (nextStep) {
            const currentUrl = new URL(window.location.href);
            navigate(
              appendQueryParams(
                `/estimate/${this.estimateType}/${nextStep}`,
                new URLSearchParams(currentUrl.search)
              )
            );
            return;
          }
        }
      }
    }

    crossPlatformLoader(() => new FormController());
  </script>
</EstimateWrapper>
